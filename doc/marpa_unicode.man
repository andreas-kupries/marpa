[comment {-*- tcl -*- doctools manpage}]
[manpage_begin marpa_unicode n 1]
[include include/module.inc]

[keywords unicode utf-8 cesu-8 mutf-8 {character classes}]
[keywords {case folding} {code point} surrogate]
[keywords {class negation} {class complement}]
[keywords {class normalization} {class canonicalisation}]
[keywords bmp {basic multi-lingual plane}]
[keywords {supplemental multi-lingual planes}]

[titledesc "[vset t:pkg.marpa-unicode]"]
[description]
[include include/welcome.inc]
[include include/audience_internal.inc]

[vset p   marpa::unicode]
[vset pd  [vset p]::data]
[vset pdc [vset pd]::cc]

[vset ^scr  [sectref scr  SCR]]
[vset ^asbr [sectref asbr ASBR]]
[vset ^assr [sectref assr ASSR]]

[section API]

[list_begin definitions]
[comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]
[call [cmd [vset p]::2asbr] [arg scr]]

This command takes a character class represented by an [vset ^scr] and
returns the equivalent [vset ^asbr] representation.

[para] An error will be thrown if the input is not a valid [vset ^scr].

[comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]
[call [cmd [vset p]::2assr] [arg scr]]

This command takes a character class represented by an [vset ^scr] and
returns the equivalent [vset ^assr] representation.

[para] An error will be thrown if the input is not a valid [vset ^scr].

[comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]
[call [cmd [vset p]::2char] [arg codepoint]]

This command takes an integer value representing a unicode
[arg codepoint] and returns a list of Tcl characters in the BMP
representing that codepoint.

[para] The returned list will contain a single character if the
codepoint is in the BMP. For a codepoint above the BMP on the other
hand the list will contain the two surrogates representing that
codepoint.

[para] An error will be thrown if the input value is not a valid
codepoint.

[comment {TODO: examples}]

[comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]
[call [cmd [vset p]::2utf] [arg codepoint] [opt [arg flags]]]

This command takes an integer value representing a unicode
[arg codepoint] and returns a list of integers in the range
[lb][const 0]...[const 255][rb] representing the UTF-8 encoding of that
codepoint.

[para] The exact details of this conversion are controlled by the list
of optional [arg flags] given to the command. See the list below for
the details.

[para] An error will be thrown if the input value is not a valid
codepoint.

[list_begin definitions]

[def {(no flags)}]

The conversion returns the standard UTF-8 encoding for all codepoints.
The returned list has a length between 1 and 4.

[def cesu]

Codepoints above the BMP are internally converted to the two
surrogates representing them, and the result is the concatenation of
the UTF-8 encodings for these surrogates.

All other codepoints, i.e. those in the BMP, are converted normally.

The returned list has a length between 1 and 3, or 6.

This is called the [vset cesu8.doc] encoding.

[def mutf]

The codepoint [const 0] is converted as [const {0xC0 0x80}].
All other codepoints are converted normally.

This is called the [vset mutf8.doc] encoding, often abbreviated to
[term MUTF-8].

[def {mutf cesu}]

Both [term MUTF-8] and [term CESU-8] are applied, as specified in the
previous items.

This is the encoding Tcl uses internally for its strings.

[def tcl]

This is a shorthand for [const {mutf cesu}].

[list_end]

[comment {TODO: examples}]

[comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]
[call [cmd [vset p]::asbr-format] [arg asbr] [opt [arg compact]]]

This command takes a character class represented by an [vset ^asbr]
and returns a multi-line string containing a human-readable form of
the same.

[para] If the bolean argument [arg compact] is either not specified or
false one-element ranges will be padded with spaces to vertically the
ranges across alternatives.

[comment {TODO: examples}]

[comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]
[call [cmd [vset p]::assr-format] [arg assr] [opt [arg compact]]]

This command takes a character class represented by an [vset ^assr]
and returns a multi-line string containing a human-readable form of
the same.

[para] If the bolean argument [arg compact] is either not specified or
false one-element ranges will be padded with spaces to vertically the
ranges across alternatives.

[comment {TODO: examples}]

[comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]
[call [cmd [vset p]::bmp]]

This command returns the highest codepoint still in the BMP.

[comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]
[call [cmd [vset pd]::fold/c] [arg codepoint]]

This command takes a unicode codepoint and returns the primary
case-equivalent codepoint.

[para] An error will be thrown if the argument is not a valid
codepoint.

[comment {TODO: examples}]

[comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]
[call [cmd [vset pd]::fold] [arg codepoint]]

This command takes a unicode codepoint and returns the set of
case-equivalent codepoints.

[para] An error will be thrown if the argument is not a valid
codepoint.

[comment {TODO: examples}]

[comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]
[call [cmd [vset p]::fold/c] [arg codes]]

This command takes a list of unicode codepoints and returns a list of
the primary case-equivalent unicode codepoints. The mapping is 1:1
from argument to result.

[para] [strong Note] that both argument and result are a limited form
of [vset ^scr], i.e. one which does not contain codepoint ranges.

[para] An error will be thrown if the argument contains invalid
codepoints.

[comment {TODO: examples}]

[comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]
[call [cmd [vset p]::max]]

This command returns the highest codepoint supported by Unicode.

[comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]
[call [cmd [vset p]::negate-class] [arg scr] [opt [arg smp]]]

This command takes a character class represented by an [vset ^scr] and
returns its normalized complement.

[para] If the optional flag [arg smp] is specified and [const true]
the argument is assumed to be fully in the SMP, and the complement is
will be limited to the SMP as well. The result of applying SMP mode to
classes reaching into the BMP is [strong undefined].

[para] An error will be thrown if the input is not a valid [vset ^scr].

[comment {TODO: examples}]

[comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]
[call [cmd [vset p]::norm-class] [arg scr]]

This command takes a character class represented by an [vset ^scr] and
returns the equivalent normalized [vset ^scr]. If the argument was
already normalized the result will be identical to it.

[para] An error will be thrown if the input is not a valid [vset ^scr].

[comment {TODO: examples}]

[comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]
[call [cmd [vset p]::point] [arg character]]

This command takes a Tcl character and returns the integer value of
its unicode codepoint.

If a multi-character string is provided to the command the result will
be the conversion of the first character in that string.

[comment {TODO: examples}]

[comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]
[call [cmd [vset p]::smp]]

This command returns the first codepoint above the BMP.

[comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]
[call [cmd [vset p]::unfold] [arg codes]]

This command takes a list of unicode codepoints and returns a list of
all unicode codepoints which are case-equivalent to one of the
codepoints in the argument.

[para] [strong Note] that both argument and result are a limited form
of [vset ^scr], i.e. one which does not contain codepoint ranges.

[para] An error will be thrown if the argument contains invalid
codepoints.

[comment {TODO: examples}]

[comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]
[call [cmd [vset pdc]::have-tcl] [arg ccname]]

This command takes the possible name of a unicode character class and
return a boolean flag indicating if this class is directly supported
by Tcl ([const true]), or not ([const false]).

[comment {TODO: examples}]

[comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]
[call [cmd [vset pdc]::have] [arg ccname]]

This command takes the possible name of a unicode character class and
return a boolean flag indicating if this is known unicode character
class ([const true]), or not ([const false]).

[comment {TODO: examples}]

[comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]
[call [cmd [vset pdc]::names]]

This command returns a list containing the names of the known unicode
character classes.

[comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]
[call [cmd [vset pdc]::ranges] [arg ccname]]

This command takes the name of a unicode character class and returns
the [vset ^scr] representing that class. The caller can assume that
the result is a normalized SCR.

[para] An error is thrown if the argument is not a known unicode
character class.

[para] As an extension the command further accepts names of the form
[const %foo] where [const foo] is a known unicode character class.

In these cases the result is the normalized [vset ^scr] of the
specified character class, after case expansion.

[comment {TODO: examples}]

[comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]
[call [cmd [vset pdc]::tcl-names]]

This command returns a list containing the names of the character
classes directly supported by Tcl itself (via [cmd {string is}]).
 
[comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]
[list_end]

[section Datastructures]

[subsection {Set of Codepoint (Ranges) - SCR} scr]

A [term {set of codepoint (ranges)}] (short for set of codepoints and
codepoint ranges, abbreviated to [term SCR]) is the main data
structure used to represent unicode character classes of any kind,
named or not.

[para] It is a Tcl list whose elements are a mix of codepoints and
codepoint ranges.

[para] The codepoints are represented by integer numbers in the range
[lb][const 0]...[cmd [vset p]::max][rb]. Numbers outside of that range
are not codepoints and a list containing such is not a valid
[term SCR].

[para] The ranges are represented by 2-element lists (pairs) of
codepoints, the start and the end of the range, inclusive. Beyond
having to be valid codepoints the start must not be greater than the
end of the range. Such a pair is not a valid range, and a list
containing such is not a valid [term SCR].

[para] A [term normalized] [term SCR] is defined as an [term SCR]
which contains no duplicate elements, no overlapping/adjacent ranges,
and all elements are sorted in integer ascending order by their start
point.

[strong Note]: That previous sentence above talks only about ranges
does not exclude the codepoints. For normalization and other purposes
codepoints can simply be treated as ranges of size 1, where start and
end points are identical.

[subsection {Alternatives of Sequences of Byte-Ranges - ASBR} asbr]

A set of [term {alternatives of sequences of byte-ranges}]
(abbreviated to [term ASBR]) is an alternative (sic!) representation
of character classes.

Making use of the fact that the UTF-8 encoding of unicode codepoints
maps each codepoint to a sequence of bytes ... XXX

TODO: FILL

Alternatives of Sequences of Byte-Ranges

[subsection ASSR assr]

Alternatives of Sequences of Surrogate-Ranges

TODO: FILL

[section Glossary]

TODO: FILL

[list_begin definitions]

[def BMP]
[def SMP]
[def case-equivalent]
[def {primary case-equivalent}]

[list_end]

[include include/feedback.inc]
[manpage_end]
