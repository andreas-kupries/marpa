# -*- tcl -*-
## (c) 2018 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## Execution core for testing the JSON parser on top of different runtimes.
## Configured by the caller with methods for
## - overall initialization and finalization
## - parser creation and destruction
## - AST result selection
#
## The methods expected to exist are
#
## * label      :: return string to name the tests
## * initialize :: global setup, for the suite
## * finalize   :: global cleanup, for the suite
## * result     :: result selection by label / base directory
## * cl         :: name of the parser class?

## The name of the parser class is stored in the `gen` config, under
## key `cl`.

# # ## ### ##### ######## ############# #####################

kt check Tcl     8.5
kt check tcltest 2

kt require support debug
kt require support debug::caller
kt require support oo::util
kt require support TclOO
kt require support fileutil ;# cat

# # ## ### ##### ######## ############# #####################
## Local shorthands

proc setup   {} { [cl] create PARSE }
proc cleanup {} { PARSE destroy }

# # ## ### ##### ######## ############# #####################
## No method sequence checking for the parser.
## Methods can be called in any order.

# # ## ### ##### ######## ############# #####################

kt source support/ast.tcl
kt source support/dirs.tcl
#kt source support/grammars.tcl
kt source support/textutils.tcl

# # ## ### ##### ######## ############# #####################

initialize

# # ## ### ##### ######## ############# #####################
##  1 constructor/0
##  2 process/1		(string)
##  3 process-file/1	(path-to-file)

# # ## ### ##### ######## ############# #####################
## constructor - wrong args, initial state, calls

test lang-[label]-parser-constructor-1.0 "[label] :: constructor, wrong args, too many" -body {
    [cl] new X
}   -returnCodes error \
    -result "wrong # args: should be \"[cl] new\""

# # ## ### ##### ######## ############# #####################
## process - argument checking

test lang-[label]-parser-process-1.0 "[label] :: process, wrong args, not enough" -body {
    PARSE process
}   -setup   setup \
    -cleanup cleanup \
    -returnCodes error \
    -result {wrong # args: should be "PARSE process string"}

test lang-[label]-parser-process-1.1 "[label] :: process, wrong args, too many" -body {
    PARSE process DATA X
}   -setup   setup \
    -cleanup cleanup \
    -returnCodes error \
    -result {wrong # args: should be "PARSE process string"}

# # ## ### ##### ######## ############# #####################
## process-file - argument checking

test lang-[label]-parser-process-file-1.0 "[label] :: process-file, wrong args, not enough" -body {
    PARSE process-file
}   -setup   setup \
    -cleanup cleanup \
    -returnCodes error \
    -result {wrong # args: should be "PARSE process-file path"}

test lang-[label]-parser-process-file-1.1 "[label] :: process-file, wrong args, too many" -body {
    PARSE process-file DATA X
}   -setup   setup \
    -cleanup cleanup \
    -returnCodes error \
    -result {wrong # args: should be "PARSE process-file path"}

# # ## ### ##### ######## ############# #####################
## process, process-file - Actual processing - Id formatting prep

# # ## ### ##### ######## ############# #####################
## Must accept inputs

lappend yes {*}[glob -nocomplain -directory [td]/input y_*]
set max [llength $yes]
set fmt %0[string length $max]d

set k 0
foreach infile $yes {
    set kd       [format $fmt $k]
    set id       [file rootname [file tail $infile]]
    set exfile   [td]/result/$id
    set input    [fget $infile]
    set expected {}
    catch { set expected [string trim [fget $exfile]] }

    test lang-[label]-process-2.${kd}---${id} "[label] :: process $id" -body {
	catch {
	    ast-format [PARSE process $input]
	} msg
	set msg
    } -setup setup -cleanup {
	cleanup
	unset msg
    } -result $expected

    test lang-[label]-process-file-3.${kd}---${id} "[label] :: process-file $id" -body {
	catch {
	    ast-format [PARSE process-file $infile]
	} msg
	set msg
    } -setup setup -cleanup {
	cleanup
	unset msg
    } -result $expected

    incr k
}

# # ## ### ##### ######## ############# #####################
## Must reject inputs.



# # ## ### ##### ######## ############# #####################
unset yes max fmt k infile kd exfile input expected id
rename setup   {}
rename cleanup {}

# # ## ### ##### ######## ############# #####################
finalize

# # ## ### ##### ######## ############# #####################
rename label      {}
rename result     {}
rename initialize {}
rename finalize   {}
return
