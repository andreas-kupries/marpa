# -*- tcl -*-
## (c) 2018 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## Execution core for testing the JSON parser on top of different runtimes.
## Configured by the caller with procedures.
## - overall initialization and finalization
## - parser creation and destruction
## - AST result selection
#
## The procedures expected to exist are
# * rt          :: Name of the runtime (`c` or `tcl`)
# * coding      :: Encoding to use when reading files with `fgetc`.
# * constraints :: Constraints for a particular test case id
#
## Derived from these are
# * cl  :: Name of the parser class
# * tnp :: Prefix for test case name

kt source support/utf.tcl

# # ## ### ##### ######## ############# #####################

kt check Tcl     8.5
kt check tcltest 2

kt require support debug
kt require support debug::caller
kt require support oo::util
kt require support TclOO
kt require support fileutil ;# cat

# # ## ### ##### ######## ############# #####################
## Local shorthands

proc tnp     {} { return lang-json-rt:[rt]  }
proc cl      {} { return json::parser::[rt] }
proc setup   {} { [cl] create PARSE }
proc cleanup {} { PARSE destroy }

# # ## ### ##### ######## ############# #####################
## No method sequence checking for the parser.
## Methods can be called in any order.

# # ## ### ##### ######## ############# #####################

kt source support/ast.tcl
kt source support/dirs.tcl
kt source support/textutils.tcl

# # ## ### ##### ######## ############# #####################

kt local support [cl]

# # ## ### ##### ######## ############# #####################
##  1 constructor/0
##  2 process/1		(string)
##  3 process-file/1	(path-to-file)

# # ## ### ##### ######## ############# #####################
## constructor - wrong args, initial state, calls

test [tnp]-constructor-1.0 "[cl] :: constructor, wrong args, too many" -body {
    [cl] new X
}   -returnCodes error \
    -result "wrong # args: should be \"[cl] new\""

# # ## ### ##### ######## ############# #####################
## process - argument checking

test [tnp]-process-1.0 "[cl] :: process, wrong args, not enough" -body {
    PARSE process
}   -setup   setup \
    -cleanup cleanup \
    -returnCodes error \
    -result {wrong # args: should be "PARSE process string"}

test [tnp]-process-1.1 "[cl] :: process, wrong args, too many" -body {
    PARSE process DATA X
}   -setup   setup \
    -cleanup cleanup \
    -returnCodes error \
    -result {wrong # args: should be "PARSE process string"}

# # ## ### ##### ######## ############# #####################
## process-file - argument checking

test [tnp]-process-file-1.0 "[cl] :: process-file, wrong args, not enough" -body {
    PARSE process-file
}   -setup   setup \
    -cleanup cleanup \
    -returnCodes error \
    -result {wrong # args: should be "PARSE process-file path"}

test [tnp]-process-file-1.1 "[cl] :: process-file, wrong args, too many" -body {
    PARSE process-file DATA X
}   -setup   setup \
    -cleanup cleanup \
    -returnCodes error \
    -result {wrong # args: should be "PARSE process-file path"}

# # ## ### ##### ######## ############# #####################
## process, process-file - Actual processing - Id formatting prep

# # ## ### ##### ######## ############# #####################
## Will-accept inputs
## - must-accept

lappend will_accept {*}[glob -nocomplain -directory [td]/input/y y_*]
set max [llength $will_accept]
set fmt %0[string length $max]d

set k -1
foreach infile $will_accept {
    incr k
    # - --   -----        -------------
    set kd       [format $fmt $k]
    set id       [file rootname [file tail $infile]]
    set exfile   [td]/result/y/$id
    set input    [fgetc $infile [coding]]
    set expected {}
    catch { set expected [string trim [fget $exfile]] }

    #utf-show [split $input {}]
    
    # - --   -----        -------------
    
    test [tnp]-process-2.${kd}---${id} "[cl] :: process $id" -body {
	catch {
	    ast-format [PARSE process $input]
	} msg
	set msg
    } -setup setup -cleanup {
	cleanup
	unset msg
    } -result $expected -constraints [constraints $id]

    test [tnp]-process-file-3.${kd}---${id} "[cl] :: process-file $id" -body {
	catch {
	    ast-format [PARSE process-file $infile]
	} msg
	set msg
    } -setup setup -cleanup {
	cleanup
	unset msg
    } -result $expected -constraints [constraints $id]
}

# # ## ### ##### ######## ############# #####################
## Will reject inputs.
## - must reject

lappend will_reject {*}[glob -nocomplain -directory [td]/input/n n_*]
set max [llength $will_reject]
set fmt %0[string length $max]d

set k -1
foreach infile $will_reject {
    incr k
    # - --   -----        -------------
    set kd       [format $fmt $k]
    set id       [file rootname [file tail $infile]]
    set input    [fgetc $infile [coding]]
    set expected {}
    catch {
	set exfile [locate [td]/result/n [rt]/$id $id]
	set expected [fget $exfile]
    }

    # utf-show [split $input {}] ; # rt-tcl
    # For rt-c activate `TRACE` tag `enter` in `inbound.c` and use the rebuilt runtime.
    
    # - --   -----        -------------
    
    test [tnp]-process-2.${kd}---${id} "[cl] :: process $id ([coding])" -body {
	PARSE process $input
    } -setup setup -cleanup {
	cleanup
    } -returnCodes error -result $expected -constraints [constraints $id]

    test [tnp]-process-file-3.${kd}---${id} "[cl] :: process-file $id" -body {
	    PARSE process-file $infile
    } -setup setup -cleanup {
	cleanup
    } -returnCodes error -result $expected -constraints [constraints $id]
}

# # ## ### ##### ######## ############# #####################
unset will_accept will_reject max fmt k infile kd exfile input expected id
rename setup   {}
rename cleanup {}
rename tnp     {}
rename cl      {}

# # ## ### ##### ######## ############# #####################
rename rt          {}
rename coding      {}
rename constraints {}

# # ## ### ##### ######## ############# #####################
return
