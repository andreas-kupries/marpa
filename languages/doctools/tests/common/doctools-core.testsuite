# -*- tcl -*-
## (c) 2018 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## Execution core for testing the JSON parser on top of different runtimes.
## Configured by the caller with procedures.
## - overall initialization and finalization
## - parser creation and destruction
## - AST result selection
#
## The procedures expected to exist are
# * rt          :: Name of the runtime (`c` or `tcl`)
# * coding      :: Encoding to use when reading files with `fgetc`.
# * constraints :: Constraints for a particular test case id
#
## Derived from these are
# * cl  :: Name of the parser class
# * tnp :: Prefix for test case name

kt source support/utf.tcl

# # ## ### ##### ######## ############# #####################
## Local configuration (restrictions for debug)

set skipfiles 0
if 0 {
    rename constraints constraints.rt
    proc constraints {id} {
	if {![dict exists {
	    i_string_UTF8_surrogate_U+D800 %%
	} $id]} {
	    return knownBug
	}
	return {}
	#constraints.rt $id
    }
}

# # ## ### ##### ######## ############# #####################

kt check Tcl     8.5
kt check tcltest 2

kt require support debug
kt require support debug::caller
kt require support oo::util
kt require support TclOO
kt require support fileutil ;# cat

# # ## ### ##### ######## ############# #####################
## Local shorthands

proc tnp     {} { return lang-json-rt_[rt]  }
proc cl      {} { return json::parser::[rt] }
proc setup   {} { [cl] create PARSE }
proc cleanup {} { PARSE destroy }

# # ## ### ##### ######## ############# #####################
## No method sequence checking for the parser.
## Methods can be called in any order.

# # ## ### ##### ######## ############# #####################

kt source support/ast.tcl
kt source support/dirs.tcl
kt source support/textutils.tcl

# # ## ### ##### ######## ############# #####################

kt local support [cl]

# # ## ### ##### ######## ############# #####################
##  1 constructor/0
##  2 process/1		(string)
##  3 process-file/1	(path-to-file)

# # ## ### ##### ######## ############# #####################
## constructor - wrong args, initial state, calls

test [tnp]-constructor-1.0 "[cl] :: constructor, wrong args, too many" -body {
    [cl] new X
}   -returnCodes error \
    -result "wrong # args: should be \"[cl] new\""

# # ## ### ##### ######## ############# #####################
## process - argument checking

test [tnp]-process-1.0 "[cl] :: process, wrong args, not enough" -body {
    PARSE process
}   -setup   setup \
    -cleanup cleanup \
    -returnCodes error \
    -result {wrong # args: should be "PARSE process string"}

test [tnp]-process-1.1 "[cl] :: process, wrong args, too many" -body {
    PARSE process DATA X
}   -setup   setup \
    -cleanup cleanup \
    -returnCodes error \
    -result {wrong # args: should be "PARSE process string"}

# # ## ### ##### ######## ############# #####################
## process-file - argument checking

test [tnp]-process-file-1.0 "[cl] :: process-file, wrong args, not enough" -body {
    PARSE process-file
}   -setup   setup \
    -cleanup cleanup \
    -returnCodes error \
    -result {wrong # args: should be "PARSE process-file path"}

test [tnp]-process-file-1.1 "[cl] :: process-file, wrong args, too many" -body {
    PARSE process-file DATA X
}   -setup   setup \
    -cleanup cleanup \
    -returnCodes error \
    -result {wrong # args: should be "PARSE process-file path"}

# # ## ### ##### ######## ############# #####################
## process, process-file - Actual processing - Id formatting prep

proc i_y {} {
    lappend r  i_number_double_huge_neg_exp
    lappend r  i_number_huge_exp
    lappend r  i_number_neg_int_huge_exp
    lappend r  i_number_pos_double_huge_exp
    lappend r  i_number_real_neg_overflow
    lappend r  i_number_real_pos_overflow
    lappend r  i_number_real_underflow
    lappend r  i_number_too_big_neg_int
    lappend r  i_number_too_big_pos_int
    lappend r  i_number_very_big_negative_int
    lappend r  i_object_key_lone_2nd_surrogate
    lappend r  i_string_1st_surrogate_but_2nd_missing
    lappend r  i_string_1st_valid_surrogate_2nd_invalid
    lappend r  i_string_UTF-8_invalid_sequence
    lappend r  i_string_UTF8_surrogate_U+D800
    lappend r  i_string_incomplete_surrogate_and_escape_valid
    lappend r  i_string_incomplete_surrogate_pair
    lappend r  i_string_incomplete_surrogates_escape_valid
    lappend r  i_string_invalid_lonely_surrogate
    lappend r  i_string_invalid_surrogate
    lappend r  i_string_invalid_utf-8
    lappend r  i_string_inverted_surrogates_U+1D11E
    lappend r  i_string_iso_latin_1
    lappend r  i_string_lone_second_surrogate
    lappend r  i_string_lone_utf8_continuation_byte
    lappend r  i_string_not_in_unicode_range
    lappend r  i_string_overlong_sequence_2_bytes
    lappend r  i_string_overlong_sequence_6_bytes
    lappend r  i_string_overlong_sequence_6_bytes_null
    lappend r  i_string_truncated-utf-8
    lappend r  i_structure_500_nested_arrays
    return $r
}

proc i_n {} {
    lappend r  i_string_UTF-16LE_with_BOM
    lappend r  i_string_utf16BE_no_BOM
    lappend r  i_string_utf16LE_no_BOM
    lappend r  i_structure_UTF-8_BOM_empty_object
    return $r
}

# # ## ### ##### ######## ############# #####################
## Will-accept inputs
## - must accept
## - may accept

lappend will_accept {*}[lsort -uniq [glob -nocomplain -directory [td]/input/y y_*.json]]
lappend will_accept {*}[lmap p [i_y] { set _ [td]/input/i/${p}.json }]

set max [llength $will_accept]
set fmt %0[string length $max]d

set k -1
foreach infile $will_accept {
    #continue
    incr k
    # - --   -----        -------------
    set kd       [format $fmt $k]
    set id       [file rootname [file tail $infile]]
    set cat      [string index $id 0]
    set input    [fgetc $infile [coding]]
    set exfile   [td]/result/$cat/$id
    set expected {}
    catch { set expected [string trim [fget $exfile]] }

    # - --   -----        -------------
    
    test [tnp]-process-2.${kd}---${id} "[cl] :: process $id" -body {
	# catch {utf-show [split $input {}]}
	# For rt-c activate `TRACE` tag `enter` in `inbound.c` and use the rebuilt runtime.

	catch {
	    ast-format [PARSE process $input]
	} msg
	set msg
    } -setup setup -cleanup {
	cleanup
	unset msg
    } -result $expected -constraints [constraints $id]

    if {$skipfiles} continue
    
    test [tnp]-process-file-3.${kd}---${id} "[cl] :: process-file $id" -body {
	catch {
	    ast-format [PARSE process-file $infile]
	} msg
	set msg
    } -setup setup -cleanup {
	cleanup
	unset msg
    } -result $expected -constraints [constraints $id]
}

# # ## ### ##### ######## ############# #####################
## Will reject inputs.
## - must reject
## - may reject

lappend will_reject {*}[lsort -uniq [glob -nocomplain -directory [td]/input/n n_*.json]]
lappend will_reject {*}[lmap p [i_n] { set _ [td]/input/i/${p}.json }]

set max [llength $will_reject]
set fmt %0[string length $max]d

set k -1
foreach infile $will_reject {
    #continue
    incr k
    # - --   -----        -------------
    set kd       [format $fmt $k]
    set id       [file rootname [file tail $infile]]
    set cat      [string index $id 0]
    set input    [fgetc $infile [coding]]
    set expected {}
    catch {
	set exfile [locate [td]/result/$cat [rt]/$id $id]
	set expected [fget $exfile]
    }

    # - --   -----        -------------
    
    test [tnp]-process-4.${kd}---${id} "[cl] :: process $id ([coding])" -body {
	# catch {utf-show [split $input {}]} ; # rt-tcl
	# For rt-c activate `TRACE` tag `enter` in `inbound.c` and use the rebuilt runtime.
    
	PARSE process $input
    } -setup setup -cleanup {
	cleanup
    } -returnCodes error -result $expected -constraints [constraints $id]

    if {$skipfiles} continue
    
    test [tnp]-process-file-5.${kd}---${id} "[cl] :: process-file $id" -body {
	    PARSE process-file $infile
    } -setup setup -cleanup {
	cleanup
    } -returnCodes error -result $expected -constraints [constraints $id]
}

# # ## ### ##### ######## ############# #####################
unset -nocomplain will_accept will_reject max fmt k infile kd exfile input expected id
rename setup   {}
rename cleanup {}
rename tnp     {}
rename cl      {}

# # ## ### ##### ######## ############# #####################
rename rt          {}
rename coding      {}
rename constraints {}

# # ## ### ##### ######## ############# #####################
return
