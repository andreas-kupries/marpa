# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2017-present Andreas Kupries
# # ## ### ##### ######## ############# #####################
## marpa::gen::format::gc

kt check Tcl     8.5
kt check tcltest 2

kt require support debug
kt require support debug::caller
kt local   support marpa::slif::container
kt local   testing marpa::gen::format::gc

# # ## ### ##### ######## ############# #####################

kt source support/common.tcl
kt source support/dirs.tcl
kt source support/grammars.tcl
kt source support/textutils.tcl

# # ## ### ##### ######## ############# #####################
##  [ok] container

# # ## ### ##### ######## ############# #####################
## container - state driven generators

test marpa-gen-format-gc-container-1.0 {container, wrong args, not enough} -body {
    marpa::gen::format::gc container
} -returnCodes error -result {wrong # args: should be "marpa::gen::format::gc container gc"}

test marpa-gen-format-gc-container-1.1 {container, wrong args, too many} -body {
    marpa::gen::format::gc container GC X
} -returnCodes error -result {wrong # args: should be "marpa::gen::format::gc container gc"}

# # ## ### ##### ######## ############# #####################

test-grammar-file-format ID generated_gc

test-grammar-map generated_gc --> k id gen base {
    test marpa-gen-format-gc-2.[ID $k]---${id} "gen gc $id" -setup {
	g-std-config
	marpa::slif::container create GC
	GC deserialize [g-extract [fget $base/gcstate]]
	GC validate ;# Deserialize should create only valid
		     # containers, if serialization is from a valid
		     # container.
    } -body {
	marpa::gen::format::gc container GC
    } -cleanup {
	GC destroy
	marpa::gen config-reset
    } -result [test-grammar-result $base generated_gc]
}

# # ## ### ##### ######## ############# #####################
cleanupTests
