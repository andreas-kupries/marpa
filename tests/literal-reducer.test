# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2017-2018 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## marpa::slif::literal
## Reducer (Simplifications able to break a literal into many)

kt check Tcl     8.5
kt check tcltest 2

kt require support debug
kt require support debug::caller
kt require support oo::util
kt require support TclOO

kt local   testing marpa::slif::literal

# # ## ### ##### ######## ############# #####################

kt source support/common.tcl
kt source support/dirs.tcl
kt source support/textutils.tcl
kt source support/literals.tcl

# # ## ### ##### ######## ############# #####################

kt source cases/lit-reduce-full.tcl
kt source cases/lit-reduce-step.tcl

# # ## ### ##### ######## ############# #####################
## [ok] r2container
## [ok] reduce
## [ok] reduce1

# # ## ### ##### ######## ############# #####################
## r2container - Transfer a reduction result into a container

test marpa-slif-literal-r2container-1.0 {r2container, wrong args, not enough} -body {
    marpa::slif::literal r2container
} -returnCodes error -result {wrong # args: should be "marpa::slif::literal r2container reductions container"}

test marpa-slif-literal-r2container-1.1 {r2container, wrong args, not enough} -body {
    marpa::slif::literal r2container W
} -returnCodes error -result {wrong # args: should be "marpa::slif::literal r2container reductions container"}

test marpa-slif-literal-r2container-1.2 {r2container, wrong args, too many} -body {
    marpa::slif::literal r2container W C X
} -returnCodes error -result {wrong # args: should be "marpa::slif::literal r2container reductions container"}

test marpa-slif-literal-r2container-2.0 {r2container, nothing} -setup {
    set c [log GC] ; /trace GC
} -body {
    marpa::slif::literal r2container {} $c
    string trim [logged "\n"]
} -cleanup {
    unset c
} -result {}

test marpa-slif-literal-r2container-2.1 {r2container, all cases} -setup {
    set c [log GC] ; /trace GC
} -body {
    marpa::slif::literal r2container {{
	C {composite {A} {B}}
	S {composite {A B}}
	A {character 65}
	B {character 66}
    } {}} $c
    string trim [logged "\n"]
} -cleanup {
    unset c
} -result [norm-trace [trdir r2c21]]

# # ## ### ##### ######## ############# #####################
## reduce - reduction to minimum

test marpa-slif-literal-reduce-1.0 {reduce, wrong args, not enough} -body {
    marpa::slif::literal reduce
} -returnCodes error -result {wrong # args: should be "marpa::slif::literal reduce worklist rules"}

test marpa-slif-literal-reduce-1.1 {reduce, wrong args, not enough} -body {
    marpa::slif::literal reduce W
} -returnCodes error -result {wrong # args: should be "marpa::slif::literal reduce worklist rules"}

test marpa-slif-literal-reduce-1.2 {reduce, wrong args, too many} -body {
    marpa::slif::literal reduce W R X
} -returnCodes error -result {wrong # args: should be "marpa::slif::literal reduce worklist rules"}

testcases k {literal subcases} [lit-reduce-full] {
    testcases j {rules result} $subcases {
	lassign $result code expected
	
	test marpa-slif-literal-reduce-2.$k.$j "reduce $code ($literal) $rules, worklist" -body {
	    F [lindex [marpa::slif::literal reduce [list <symbol> $literal] $rules] 0]
	    # Access worklist, ignore the aliases, supposed to be empty
	} -returnCodes $code -result $expected

	if {$code eq "error"} continue

	test marpa-slif-literal-reduce-3.$k.$j "reduce $code ($literal) $rules, aliases" -body {
	    lindex [marpa::slif::literal reduce [list <symbol> $literal] $rules] 1
	    # Access aliases, always empty
	} -result {}
    }
}

# # ## ### ##### ######## ############# #####################
## reduce1 - single reduction step

test marpa-slif-literal-reduce1-1.0 {reduce1, wrong args, not enough} -body {
    marpa::slif::literal reduce1
} -returnCodes error -result {wrong # args: should be "marpa::slif::literal reduce1 litsymbol literal rules state"}

test marpa-slif-literal-reduce1-1.1 {reduce1, wrong args, not enough} -body {
    marpa::slif::literal reduce1 S
} -returnCodes error -result {wrong # args: should be "marpa::slif::literal reduce1 litsymbol literal rules state"}

test marpa-slif-literal-reduce1-1.2 {reduce1, wrong args, not enough} -body {
    marpa::slif::literal reduce1 S L
} -returnCodes error -result {wrong # args: should be "marpa::slif::literal reduce1 litsymbol literal rules state"}

test marpa-slif-literal-reduce1-1.3 {reduce1, wrong args, not enough} -body {
    marpa::slif::literal reduce1 S L R
} -returnCodes error -result {wrong # args: should be "marpa::slif::literal reduce1 litsymbol literal rules state"}

test marpa-slif-literal-reduce1-1.4 {reduce1, wrong args, too many} -body {
    marpa::slif::literal reduce1 S L R S X
} -returnCodes error -result {wrong # args: should be "marpa::slif::literal reduce1 litsymbol literal rules state"}

testcases k {literal subcases} [lit-reduce-step] {
    testcases j {rules result} $subcases {
	lassign $result code expected

	test marpa-slif-literal-reduce1-2.$k.$j "reduce1 $code ($literal) $rules" -setup {
	    set state [log STATE] ; /trace STATE
	} -body {
	    marpa::slif::literal reduce1 <symbol> $literal $rules $state
	    string trim [logged "\n"]
	} -cleanup {
	    catch { logged }
	    unset state
	} -returnCodes $code -result $expected
    }
}

# # ## ### ##### ######## ############# #####################
cleanupTests
return
