# -*- tcl -*-
## (c) 2017 Andreas Kupries
# # ## ### ##### ######## ############# #####################

## Execution core for testing the marpa runtime engines with various
## SLIF-specified grammars demonstrating various features and possible
## behaviours. This is similiar to parser-core, one stage further.

## Configured by the caller with methods for
## - overall initialization and finalization
## - parser creation and destruction
## - Result selection
#
## The methods expected to exist are
#
## * label      :: return string to name the tests
## * initialize :: global setup, for the suite
## * finalize   :: global cleanup, for the suite
## * input      :: input selection by label / base directory
## * result     :: result selection by label / base directory

## The name of the parser class is stored in the `gen` config, under
## key `cl`.

# # ## ### ##### ######## ############# #####################

kt check Tcl     8.5
kt check tcltest 2

kt require support debug
kt require support debug::caller
kt require support oo::util
kt require support TclOO
kt require support fileutil ;# cat

# # ## ### ##### ######## ############# #####################
## Local shorthands

proc setup   {} { [gen cget cl] create PARSE }
proc cleanup {} { PARSE destroy }

# # ## ### ##### ######## ############# #####################
## No method sequence checking for the parser.
## Methods can be called in any order.

# # ## ### ##### ######## ############# #####################

kt source support/ast.tcl
kt source support/dirs.tcl
kt source support/grammars.tcl
kt source support/textutils.tcl

# # ## ### ##### ######## ############# #####################
## Setup dynamic parts of the testsuite
## Currently only importing the `bootstrap/marpa-tcl-slif`

exec [td]/grammars/setup.sh

# # ## ### ##### ######## ############# #####################

initialize

# # ## ### ##### ######## ############# #####################
## Actual processing - Id formatting prep

incr max
test-grammar-files rt_example --> __ __ { incr max }
set format %0[string length $max]d
unset max

# # ## ### ##### ######## ############# #####################

incr k
test-grammar-map rt_example --> id rte base {
    gen configure gr $rte
    gen setup cl rte$k
 
    set input  [fget [input  $base]]
    set result [string trimright [fget [result $base]]]
    set kd     [format $format $k]

    test marpa-[label]-runtime-process-2.${kd}---${id} "[label] :: process $id" -body {
	catch {
	    ast-format [PARSE process $input]
	} msg
	set msg ;# set ::errorInfo
    } -setup setup -cleanup {
	cleanup
	unset msg
    } -result $result

    gen cleanup
    incr k
}

# # ## ### ##### ######## ############# #####################
unset k base format result kd input rte
rename setup   {}
rename cleanup {}

# # ## ### ##### ######## ############# #####################
finalize

# # ## ### ##### ######## ############# #####################
rename label      {}
rename result     {}
rename initialize {}
rename finalize   {}
return
