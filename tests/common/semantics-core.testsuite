# -*- tcl -*-
## (c) 2017-present Andreas Kupries
# # ## ### ##### ######## ############# #####################
## Execution core for testing the SLIF semantics in combination with
## all kinds of marpa-based parser engines.
## Configured by the caller with methods for
## - overall initialization and finalization
## - parser creation and destruction
## - semantics result selection
#
## The methods expected to exist are
#
## * label      :: return string to name the tests
## * initialize :: global setup, for the suite
## * finalize   :: global cleanup, for the suite
## * result     :: result selection by label / base directory

## The name of the parser class is stored in the `gen` config, under
## key `cl`.

# # ## ### ##### ######## ############# #####################

kt check Tcl     8.5
kt check tcltest 2

kt require support debug
kt require support debug::caller
kt require support oo::util
kt require support TclOO
kt require support fileutil ;# cat

kt local* support marpa::slif::semantics

# # ## ### ##### ######## ############# #####################
## Local helper commands

proc setup   {} {
    marpa::slif::semantics create SEMA [log GC] ; /trace GC
    [gen cget cl]          create PARSE
}

proc cleanup {} {
    PARSE destroy
    catch { SEMA destroy }
    # The semantics instance normally auto-destroys itself at the end
    # of "process"(file). However if the test failed this may not have
    # happened. Thus we try to destroy such leftovers so that they may
    # not interfere with the next test, and ignore the error thrown if
    # it was already gone.
}

proc norm-result {path} {
    set text [fget $path]
    if {[string match {*Parsing failed in*} $text]} {
	# Keep indentation in expected error results
	return [string trimright $text]
    }

    # Reformat readable result (highlighting of important parts by
    # indentation and separation) into the actual trace coming out of
    # the semantics.
    return [norm-trace $path]
}

# # ## ### ##### ######## ############# #####################
## No method sequence checking for the parser.
## Methods can be called in any order.

# # ## ### ##### ######## ############# #####################

kt source support/ast.tcl
kt source support/common.tcl
kt source support/dirs.tcl
kt source support/grammars.tcl
kt source support/textutils.tcl

# # ## ### ##### ######## ############# #####################
## Setup dynamic parts of the testsuite
## Currently only importing the `bootstrap/marpa-tcl-slif`

exec [td]/grammars/setup.sh

# # ## ### ##### ######## ############# #####################

initialize

# # ## ### ##### ######## ############# #####################
##  1 constructor/0
##  2 process/1		(ast)

# # ## ### ##### ######## ############# #####################
## constructor - wrong args, initial state, calls

test marpa-slif-semantics-constructor-1.0 {constructor, wrong args, not enough} -body {
    marpa::slif::semantics new
} -returnCodes error -result {wrong # args: should be "marpa::slif::semantics new container"}

test marpa-slif-semantics-constructor-1.1 {constructor, wrong args, too many} -body {
    marpa::slif::semantics new CONTAINER X
} -returnCodes error -result {wrong # args: should be "marpa::slif::semantics new container"}

test marpa-slif-semantics-constructor-1.2 {constructor, wrong args, not enough} -body {
    marpa::slif::semantics create SEMA
} -returnCodes error -result {wrong # args: should be "marpa::slif::semantics create SEMA container"}

test marpa-slif-semantics-constructor-1.3 {constructor, wrong args, too many} -body {
    marpa::slif::semantics create SEMA CONTAINER X
} -returnCodes error -result {wrong # args: should be "marpa::slif::semantics create SEMA container"}

# # ## ### ##### ######## ############# #####################
## process - wrong # args

test marpa-slif-semantics-process-1.0 {process, wrong args, not enough} -setup {
    marpa::slif::semantics create SEMA [log CONTAINER]
} -body {
    SEMA process
} -cleanup {
    SEMA destroy
    logged
} -returnCodes error -result {wrong # args: should be "SEMA process ast"}

test marpa-slif-semantics-process-1.1 {process, wrong args, too many} -setup {
    marpa::slif::semantics create SEMA [log CONTAINER]
} -body {
    SEMA process AST X
} -cleanup {
    SEMA destroy
    logged
} -returnCodes error -result {wrong # args: should be "SEMA process ast"}

# # ## ### ##### ######## ############# #####################
## semantics + process, process-file - Actual processing

test-grammar-file-format ID slif
test-grammar-map slif --> k id slif base {
    test marpa-slif-semantics-process-[label]-2.[ID $k]---${id} "[label] :: semantics $id /trace" -body {
	if {[catch {
	    SEMA process [PARSE process [fget $slif]]
	} msg]} {
	    #puts $::errorInfo
	    log-add GC error $msg
	}
	string trim [logged "\n"]
    } -setup setup -cleanup {
	unset msg
	cleanup
    } -result [norm-result [result $base]]
}

# # ## ### ##### ######## ############# #####################
rename ID      {}
rename setup   {}
rename cleanup {}

# # ## ### ##### ######## ############# #####################
finalize

# # ## ### ##### ######## ############# #####################
rename label      {}
rename result     {}
rename initialize {}
rename finalize   {}
return
