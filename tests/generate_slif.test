# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2017-2018 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## marpa::gen::format::slif

kt check Tcl     8.5
kt check tcltest 2

kt require support debug
kt require support debug::caller
kt local   support marpa::slif::container
kt local   testing marpa::gen::format::slif

# # ## ### ##### ######## ############# #####################

kt source support/common.tcl
kt source support/dirs.tcl
kt source support/grammars.tcl
kt source support/textutils.tcl

# # ## ### ##### ######## ############# #####################
##  [ok] container

# # ## ### ##### ######## ############# #####################
## container - state driven generators

test marpa-gen-format-slif-container-1.0 {container, wrong args, not enough} -body {
    marpa::gen::format::slif container
} -returnCodes error -result {wrong # args: should be "marpa::gen::format::slif container gc"}

test marpa-gen-format-slif-container-1.1 {container, wrong args, too many} -body {
    marpa::gen::format::slif container GC X
} -returnCodes error -result {wrong # args: should be "marpa::gen::format::slif container gc"}

# # ## ### ##### ######## ############# #####################

# TODO: move into the support code.
proc X {text} {
    # Drop comments and empty lines from the slif-ification. They are
    # irrelevant to the semantics and thus the comparison.
    join [lmap line [split $text \n] {
	if {[string match "#*" $line]} continue
	if {$line eq {}} continue
	set _ $line
    }] \n
}

set max 0
test-grammar-files generated_gc --> __ __ { incr max }
set format %0[string length $max]d
unset max

set k 0
test-grammar-map gcstate --> id gen base {
    set input    [string trimright [fget $base/gcstate]]
    set kd       [format $format $k]
    set expected [test-grammar-result $base generated_slif]

    test marpa-gen-format-slif-2.${kd}---${id} "gen gc $id" -setup {
	marpa::gen config! version  <Version>
	marpa::gen config! writer   <Writer>
	marpa::gen config! year     <Year>
	marpa::gen config! name     <Name>
	marpa::gen config! operator <Operator>
	marpa::gen config! tool     <Tool>
	marpa::gen config! gentime  <GenerationTime>
	marpa::slif::container create GC
	GC deserialize [dict get $input grammar]
	GC validate ;# Deserialize should create only valid
		     # containers, if serialization is from a valid
		     # container.
    } -body {
	X [marpa::gen::format::slif container GC]
    } -cleanup {
	GC destroy
	marpa::gen config-reset
    } -result $expected

    incr k
}

# # ## ### ##### ######## ############# #####################
cleanupTests
