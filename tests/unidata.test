# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2017-2018 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## marpa::unidata

kt check Tcl     8.5
kt check tcltest 2

kt require support debug
kt require support debug::caller
kt require support oo::util
kt require support TclOO

kt local   testing marpa::unicode

# # ## ### ##### ######## ############# #####################

kt source support/common.tcl

## Accessors on top of the generated unicode data tables
# # ## ### ##### ######## ############# #####################
## [ok] data cc have-tcl
## [ok] data cc have
## [ok] data cc tcl-names
## [ok] data cc names
## [ok] data cc ranges
## [ok] data fold
## [ok] data fold/c

# # ## ### ##### ######## ############# #####################
## data cc tcl-names - Return list of char classes supported by Tcl

test marpa-unicode-data-cc-tcl-names-1.0 {tcl-names, wrong args, too many} -body {
    marpa unicode data cc tcl-names X
} -returnCodes error -result {wrong # args: should be "marpa unicode data cc tcl-names"}

test marpa-unicode-data-cc-tcl-names-2.0 {tcl-names, braille, no} -body {
    lsort -dict [marpa unicode data cc tcl-names]
} -result {alnum alpha blank cntrl digit graph lower print punct space upper xdigit}

# # ## ### ##### ######## ############# #####################
## data cc names - Return list of char classes supported by marpa unicode tables

test marpa-unicode-data-cc-names-1.0 {names, wrong args, too many} -body {
    marpa unicode data cc names X
} -returnCodes error -result {wrong # args: should be "marpa unicode data cc names"}

test marpa-unicode-data-cc-names-2.0 {names} -body {
    lsort -dict [marpa unicode data cc names]
} -result {adlam adlam:smp ahom ahom:smp alnum alnum:bmp alnum:smp alpha alpha:bmp alpha:smp anatolian_hieroglyphs anatolian_hieroglyphs:smp arabic arabic:bmp arabic:smp armenian armenian:bmp ascii ascii:bmp avestan avestan:smp balinese balinese:bmp bamum bamum:bmp bamum:smp bassa_vah bassa_vah:smp batak batak:bmp bengali bengali:bmp bhaiksuki bhaiksuki:smp blank blank:bmp bopomofo bopomofo:bmp brahmi brahmi:smp braille braille:bmp buginese buginese:bmp buhid buhid:bmp canadian_aboriginal canadian_aboriginal:bmp carian carian:smp caucasian_albanian caucasian_albanian:smp cc cc:bmp cf cf:bmp cf:smp chakma chakma:smp cham cham:bmp cherokee cherokee:bmp co co:bmp co:smp common common:bmp common:smp control control:bmp control:smp coptic coptic:bmp cs:bmp cuneiform cuneiform:smp cypriot cypriot:smp cyrillic cyrillic:bmp deseret deseret:smp devanagari devanagari:bmp digit digit:bmp digit:smp duployan duployan:smp egyptian_hieroglyphs egyptian_hieroglyphs:smp elbasan elbasan:smp ethiopic ethiopic:bmp georgian georgian:bmp glagolitic glagolitic:bmp glagolitic:smp gothic gothic:smp grantha grantha:smp graph graph:bmp graph:smp greek greek:bmp greek:smp gujarati gujarati:bmp gurmukhi gurmukhi:bmp han han:bmp han:smp hangul hangul:bmp hanunoo hanunoo:bmp hatran hatran:smp hebrew hebrew:bmp hiragana hiragana:bmp hiragana:smp imperial_aramaic imperial_aramaic:smp inherited inherited:bmp inherited:smp inscriptional_pahlavi inscriptional_pahlavi:smp inscriptional_parthian inscriptional_parthian:smp javanese javanese:bmp kaithi kaithi:smp kannada kannada:bmp katakana katakana:bmp katakana:smp kayah_li kayah_li:bmp kharoshthi kharoshthi:smp khmer khmer:bmp khojki khojki:smp khudawadi khudawadi:smp lao lao:bmp latin latin:bmp lepcha lepcha:bmp limbu limbu:bmp linear_a linear_a:smp linear_b linear_b:smp lisu lisu:bmp ll ll:bmp ll:smp lm lm:bmp lm:smp lo lo:bmp lo:smp lower lower:bmp lower:smp lt lt:bmp lu lu:bmp lu:smp lycian lycian:smp lydian lydian:smp mahajani mahajani:smp malayalam malayalam:bmp mandaic mandaic:bmp manichaean manichaean:smp marchen marchen:smp mc mc:bmp mc:smp me me:bmp meetei_mayek meetei_mayek:bmp mende_kikakui mende_kikakui:smp meroitic_cursive meroitic_cursive:smp meroitic_hieroglyphs meroitic_hieroglyphs:smp miao miao:smp mn mn:bmp mn:smp modi modi:smp mongolian mongolian:bmp mongolian:smp mro mro:smp multani multani:smp myanmar myanmar:bmp nabataean nabataean:smp nd nd:bmp nd:smp new_tai_lue new_tai_lue:bmp newa newa:smp nko nko:bmp nl nl:bmp nl:smp no no:bmp no:smp ogham ogham:bmp ol_chiki ol_chiki:bmp old_hungarian old_hungarian:smp old_italic old_italic:smp old_north_arabian old_north_arabian:smp old_permic old_permic:smp old_persian old_persian:smp old_south_arabian old_south_arabian:smp old_turkic old_turkic:smp oriya oriya:bmp osage osage:smp osmanya osmanya:smp pahawh_hmong pahawh_hmong:smp palmyrene palmyrene:smp pau_cin_hau pau_cin_hau:smp pc pc:bmp pd pd:bmp pe pe:bmp pf pf:bmp phags_pa phags_pa:bmp phoenician phoenician:smp pi pi:bmp po po:bmp po:smp print print:bmp print:smp ps ps:bmp psalter_pahlavi psalter_pahlavi:smp punct punct:bmp punct:smp rejang rejang:bmp runic runic:bmp samaritan samaritan:bmp saurashtra saurashtra:bmp sc sc:bmp sharada sharada:smp shavian shavian:smp siddham siddham:smp signwriting signwriting:smp sinhala sinhala:bmp sinhala:smp sk sk:bmp sk:smp sm sm:bmp sm:smp so so:bmp so:smp sora_sompeng sora_sompeng:smp space space:bmp sundanese sundanese:bmp syloti_nagri syloti_nagri:bmp syriac syriac:bmp tagalog tagalog:bmp tagbanwa tagbanwa:bmp tai_le tai_le:bmp tai_tham tai_tham:bmp tai_viet tai_viet:bmp takri takri:smp tamil tamil:bmp tangut tangut:smp telugu telugu:bmp thaana thaana:bmp thai thai:bmp tibetan tibetan:bmp tifinagh tifinagh:bmp tirhuta tirhuta:smp ugaritic ugaritic:smp upper upper:bmp upper:smp vai vai:bmp warang_citi warang_citi:smp word word:bmp word:smp xdigit xdigit:bmp yi yi:bmp zl zl:bmp zp zp:bmp zs zs:bmp}

# # ## ### ##### ######## ############# #####################
## data cc have-tcl - Test if a named cclass is supported by Tcl

test marpa-unicode-data-cc-have-tcl-1.0 {have-tcl, wrong args, not enough} -body {
    marpa unicode data cc have-tcl
} -returnCodes error -result {wrong # args: should be "marpa unicode data cc have-tcl cclass"}

test marpa-unicode-data-cc-have-tcl-1.1 {have-tcl, wrong args, too many} -body {
    marpa unicode data cc have-tcl CCLASS X
} -returnCodes error -result {wrong # args: should be "marpa unicode data cc have-tcl cclass"}

test marpa-unicode-data-cc-have-tcl-2.0 {have-tcl, braille, no} -body {
    marpa unicode data cc have-tcl braille
} -result 0

test marpa-unicode-data-cc-have-tcl-2.0 {have-tcl, alnum, yes} -body {
    marpa unicode data cc have-tcl alnum
} -result 1

# # ## ### ##### ######## ############# #####################
## data cc have - Test if a named cclass is supported by the Marpa Unicode Tables

test marpa-unicode-data-cc-have-1.0 {have, wrong args, not enough} -body {
    marpa unicode data cc have
} -returnCodes error -result {wrong # args: should be "marpa unicode data cc have cclass"}

test marpa-unicode-data-cc-have-1.1 {have, wrong args, too many} -body {
    marpa unicode data cc have CCLASS X
} -returnCodes error -result {wrong # args: should be "marpa unicode data cc have cclass"}

test marpa-unicode-data-cc-have-2.0 {have, bogus, no} -body {
    marpa unicode data cc have bogus
} -result 0

test marpa-unicode-data-cc-have-2.0 {have, braille, yes} -body {
    marpa unicode data cc have braille
} -result 1



# # ## ### ##### ######## ############# #####################
## data cc ranges - Convert name of unicode class to set of uni(code)points and ranges.

test marpa-unicode-data-cc-ranges-1.0 {ranges, wrong args, not enough} -body {
    marpa unicode data cc ranges
} -returnCodes error -result {wrong # args: should be "marpa unicode data cc ranges cclass"}

test marpa-unicode-data-cc-ranges-1.1 {ranges, wrong args, too many} -body {
    marpa unicode data cc ranges CCLASS X
} -returnCodes error -result {wrong # args: should be "marpa unicode data cc ranges cclass"}

test marpa-unicode-data-cc-ranges-2.0 {ranges, braille} -body {
    lrange [marpa unicode data cc ranges braille] 0 end
    # The lrange is used to strip formatting from the output of ranges.
} -result {{0x2800 0x28FF}}

test marpa-unicode-data-cc-ranges-2.1 {ranges, bogus} -body {
    marpa unicode data cc ranges bogus
} -returnCodes error -result {Bad character class bogus}

# # ## ### ##### ######## ############# #####################
## data fold - Convert uni(code)point to class of case-equivalent uni(code)points

test marpa-unicode-data-fold-1.0 {fold, wrong args, not enough} -body {
    marpa unicode data fold
} -returnCodes error -result {wrong # args: should be "marpa unicode data fold codepoint"}

test marpa-unicode-data-fold-1.1 {fold, wrong args, too many} -body {
    marpa unicode data fold CODEPOINT X
} -returnCodes error -result {wrong # args: should be "marpa unicode data fold codepoint"}

test marpa-unicode-data-fold-2.0 {fold, bogus} -body {
    marpa unicode data fold bogus
} -returnCodes error -result {Expected integer for codepoint in [0...1114111], got "bogus"}
# expected integer but got "bogus"

testcases k {label codepoint cclass} {
    a  97 {65 97}
    i 105 {73 105 304 305}
    k 107 {75 107 8490}
    s 115 {83 115 383}
    @  64 64
    ? 125250 {125216 125250}
    ? 125251 {125217 125251}
    ? 125252 125252
} {
    # For the unexpected codepoints (>300), see (xx).
    test marpa-unicode-data-fold-2.$k "fold, $label" -body {
	marpa unicode data fold $codepoint
    } -result $cclass
}

# # ## ### ##### ######## ############# #####################
## data fold/c - Convert uni(code)point to case-equivalent primary uni(code)point

test marpa-unicode-data-fold/c-1.0 {fold/c, wrong args, not enough} -body {
    marpa unicode data fold/c
} -returnCodes error -result {wrong # args: should be "marpa unicode data fold/c codepoint"}

test marpa-unicode-data-fold/c-1.1 {fold/c, wrong args, too many} -body {
    marpa unicode data fold/c CODEPOINT X
} -returnCodes error -result {wrong # args: should be "marpa unicode data fold/c codepoint"}

test marpa-unicode-data-fold/c-2.0 {fold/c, bogus} -body {
    marpa unicode data fold/c bogus
} -returnCodes error -result {Expected integer for codepoint in [0...1114111], got "bogus"}
#    expected integer but got "bogus"

testcases k {label codepoint primary} {
    a  97 65
    i 105 73
    k 107 75
    s 115 83
    @  64 64
    ? 125250 125216
    ? 125251 125217
    ? 125252 125252
} {
    # For the unexpected codepoints (>300), see (xx).
    test marpa-unicode-data-fold/c-2.$k "fold/c, $label" -body {
	marpa unicode data fold/c $codepoint
    } -result $primary
}

# # ## ### ##### ######## ############# #####################
cleanupTests
return
