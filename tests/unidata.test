# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2017-2018 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## marpa::unidata

kt check Tcl     8.5
kt check tcltest 2

kt require support debug
kt require support debug::caller
kt require support oo::util
kt require support TclOO

kt local   testing marpa::unicode

# # ## ### ##### ######## ############# #####################

kt source support/common.tcl

## Accessors on top of the generated unicode data tables
# # ## ### ##### ######## ############# #####################
## [ok] data cc have-tcl
## [ok] data cc have
## [ok] data cc tcl-names
## [ok] data cc names
## [ok] data cc ranges
## [ok] data fold
## [ok] data fold/c

# # ## ### ##### ######## ############# #####################
## data cc tcl-names - Return list of char classes supported by Tcl

test marpa-unicode-data-cc-tcl-names-1.0 {tcl-names, wrong args, too many} -body {
    marpa unicode data cc tcl-names X
} -returnCodes error -result {wrong # args: should be "marpa unicode data cc tcl-names"}

test marpa-unicode-data-cc-tcl-names-2.0 {tcl-names, braille, no} -body {
    lsort -dict [marpa unicode data cc tcl-names]
} -result {alnum alpha blank cntrl digit graph lower print punct space upper xdigit}

# # ## ### ##### ######## ############# #####################
## data cc names - Return list of char classes supported by marpa unicode tables

test marpa-unicode-data-cc-names-1.0 {names, wrong args, too many} -body {
    marpa unicode data cc names X
} -returnCodes error -result {wrong # args: should be "marpa unicode data cc names"}

test marpa-unicode-data-cc-names-2.0 {names} -body {
    lsort -dict [marpa unicode data cc names]
} -result {adlam adlam:high ahom ahom:high alnum alnum:bmp alnum:high alpha alpha:bmp alpha:high anatolian_hieroglyphs anatolian_hieroglyphs:high arabic arabic:bmp arabic:high armenian armenian:bmp ascii ascii:bmp avestan avestan:high balinese balinese:bmp bamum bamum:bmp bamum:high bassa_vah bassa_vah:high batak batak:bmp bengali bengali:bmp bhaiksuki bhaiksuki:high blank blank:bmp bopomofo bopomofo:bmp brahmi brahmi:high braille braille:bmp buginese buginese:bmp buhid buhid:bmp canadian_aboriginal canadian_aboriginal:bmp carian carian:high caucasian_albanian caucasian_albanian:high cc cc:bmp cf cf:bmp cf:high chakma chakma:high cham cham:bmp cherokee cherokee:bmp co co:bmp co:high common common:bmp common:high control control:bmp control:high coptic coptic:bmp cs:bmp cuneiform cuneiform:high cypriot cypriot:high cyrillic cyrillic:bmp deseret deseret:high devanagari devanagari:bmp digit digit:bmp digit:high duployan duployan:high egyptian_hieroglyphs egyptian_hieroglyphs:high elbasan elbasan:high ethiopic ethiopic:bmp georgian georgian:bmp glagolitic glagolitic:bmp glagolitic:high gothic gothic:high grantha grantha:high graph graph:bmp graph:high greek greek:bmp greek:high gujarati gujarati:bmp gurmukhi gurmukhi:bmp han han:bmp han:high hangul hangul:bmp hanunoo hanunoo:bmp hatran hatran:high hebrew hebrew:bmp hiragana hiragana:bmp hiragana:high imperial_aramaic imperial_aramaic:high inherited inherited:bmp inherited:high inscriptional_pahlavi inscriptional_pahlavi:high inscriptional_parthian inscriptional_parthian:high javanese javanese:bmp kaithi kaithi:high kannada kannada:bmp katakana katakana:bmp katakana:high kayah_li kayah_li:bmp kharoshthi kharoshthi:high khmer khmer:bmp khojki khojki:high khudawadi khudawadi:high lao lao:bmp latin latin:bmp lepcha lepcha:bmp limbu limbu:bmp linear_a linear_a:high linear_b linear_b:high lisu lisu:bmp ll ll:bmp ll:high lm lm:bmp lm:high lo lo:bmp lo:high lower lower:bmp lower:high lt lt:bmp lu lu:bmp lu:high lycian lycian:high lydian lydian:high mahajani mahajani:high malayalam malayalam:bmp mandaic mandaic:bmp manichaean manichaean:high marchen marchen:high mc mc:bmp mc:high me me:bmp meetei_mayek meetei_mayek:bmp mende_kikakui mende_kikakui:high meroitic_cursive meroitic_cursive:high meroitic_hieroglyphs meroitic_hieroglyphs:high miao miao:high mn mn:bmp mn:high modi modi:high mongolian mongolian:bmp mongolian:high mro mro:high multani multani:high myanmar myanmar:bmp nabataean nabataean:high nd nd:bmp nd:high new_tai_lue new_tai_lue:bmp newa newa:high nko nko:bmp nl nl:bmp nl:high no no:bmp no:high ogham ogham:bmp ol_chiki ol_chiki:bmp old_hungarian old_hungarian:high old_italic old_italic:high old_north_arabian old_north_arabian:high old_permic old_permic:high old_persian old_persian:high old_south_arabian old_south_arabian:high old_turkic old_turkic:high oriya oriya:bmp osage osage:high osmanya osmanya:high pahawh_hmong pahawh_hmong:high palmyrene palmyrene:high pau_cin_hau pau_cin_hau:high pc pc:bmp pd pd:bmp pe pe:bmp pf pf:bmp phags_pa phags_pa:bmp phoenician phoenician:high pi pi:bmp po po:bmp po:high print print:bmp print:high ps ps:bmp psalter_pahlavi psalter_pahlavi:high punct punct:bmp punct:high rejang rejang:bmp runic runic:bmp samaritan samaritan:bmp saurashtra saurashtra:bmp sc sc:bmp sharada sharada:high shavian shavian:high siddham siddham:high signwriting signwriting:high sinhala sinhala:bmp sinhala:high sk sk:bmp sk:high sm sm:bmp sm:high so so:bmp so:high sora_sompeng sora_sompeng:high space space:bmp sundanese sundanese:bmp syloti_nagri syloti_nagri:bmp syriac syriac:bmp tagalog tagalog:bmp tagbanwa tagbanwa:bmp tai_le tai_le:bmp tai_tham tai_tham:bmp tai_viet tai_viet:bmp takri takri:high tamil tamil:bmp tangut tangut:high telugu telugu:bmp thaana thaana:bmp thai thai:bmp tibetan tibetan:bmp tifinagh tifinagh:bmp tirhuta tirhuta:high ugaritic ugaritic:high upper upper:bmp upper:high vai vai:bmp warang_citi warang_citi:high word word:bmp word:high xdigit xdigit:bmp yi yi:bmp zl zl:bmp zp zp:bmp zs zs:bmp}

# # ## ### ##### ######## ############# #####################
## data cc have-tcl - Test if a named cclass is supported by Tcl

test marpa-unicode-data-cc-have-tcl-1.0 {have-tcl, wrong args, not enough} -body {
    marpa unicode data cc have-tcl
} -returnCodes error -result {wrong # args: should be "marpa unicode data cc have-tcl cclass"}

test marpa-unicode-data-cc-have-tcl-1.1 {have-tcl, wrong args, too many} -body {
    marpa unicode data cc have-tcl CCLASS X
} -returnCodes error -result {wrong # args: should be "marpa unicode data cc have-tcl cclass"}

test marpa-unicode-data-cc-have-tcl-2.0 {have-tcl, braille, no} -body {
    marpa unicode data cc have-tcl braille
} -result 0

test marpa-unicode-data-cc-have-tcl-2.0 {have-tcl, alnum, yes} -body {
    marpa unicode data cc have-tcl alnum
} -result 1

# # ## ### ##### ######## ############# #####################
## data cc have - Test if a named cclass is supported by the Marpa Unicode Tables

test marpa-unicode-data-cc-have-1.0 {have, wrong args, not enough} -body {
    marpa unicode data cc have
} -returnCodes error -result {wrong # args: should be "marpa unicode data cc have cclass"}

test marpa-unicode-data-cc-have-1.1 {have, wrong args, too many} -body {
    marpa unicode data cc have CCLASS X
} -returnCodes error -result {wrong # args: should be "marpa unicode data cc have cclass"}

test marpa-unicode-data-cc-have-2.0 {have, bogus, no} -body {
    marpa unicode data cc have bogus
} -result 0

test marpa-unicode-data-cc-have-2.0 {have, braille, yes} -body {
    marpa unicode data cc have braille
} -result 1



# # ## ### ##### ######## ############# #####################
## data cc ranges - Convert name of unicode class to set of uni(code)points and ranges.

test marpa-unicode-data-cc-ranges-1.0 {ranges, wrong args, not enough} -body {
    marpa unicode data cc ranges
} -returnCodes error -result {wrong # args: should be "marpa unicode data cc ranges cclass"}

test marpa-unicode-data-cc-ranges-1.1 {ranges, wrong args, too many} -body {
    marpa unicode data cc ranges CCLASS X
} -returnCodes error -result {wrong # args: should be "marpa unicode data cc ranges cclass"}

test marpa-unicode-data-cc-ranges-2.0 {ranges, braille} -body {
    lrange [marpa unicode data cc ranges braille] 0 end
    # The lrange is used to strip formatting from the output of ranges.
} -result {{0x2800 0x28FF}}

test marpa-unicode-data-cc-ranges-2.1 {ranges, bogus} -body {
    marpa unicode data cc ranges bogus
} -returnCodes error -result {Bad character class bogus}

# # ## ### ##### ######## ############# #####################
## data fold - Convert uni(code)point to class of case-equivalent uni(code)points

test marpa-unicode-data-fold-1.0 {fold, wrong args, not enough} -body {
    marpa unicode data fold
} -returnCodes error -result {wrong # args: should be "marpa unicode data fold codepoint"}

test marpa-unicode-data-fold-1.1 {fold, wrong args, too many} -body {
    marpa unicode data fold CODEPOINT X
} -returnCodes error -result {wrong # args: should be "marpa unicode data fold codepoint"}

test marpa-unicode-data-fold-2.0 {fold, bogus} -body {
    marpa unicode data fold bogus
} -returnCodes error -result {expected integer but got "bogus"}

testcases k {label codepoint cclass} {
    a  97 {65 97}
    i 105 {73 105 304 305}
    k 107 {75 107 8490}
    s 115 {83 115 383}
    @  64 64
} {
    # For the unexpected codepoints (>300), see (xx).
    test marpa-unicode-data-fold-2.$k "fold, $label" -body {
	marpa unicode data fold $codepoint
    } -result $cclass
}

# # ## ### ##### ######## ############# #####################
## data fold/c - Convert uni(code)point to case-equivalent primary uni(code)point

test marpa-unicode-data-fold/c-1.0 {fold/c, wrong args, not enough} -body {
    marpa unicode data fold/c
} -returnCodes error -result {wrong # args: should be "marpa unicode data fold/c codepoint"}

test marpa-unicode-data-fold/c-1.1 {fold/c, wrong args, too many} -body {
    marpa unicode data fold/c CODEPOINT X
} -returnCodes error -result {wrong # args: should be "marpa unicode data fold/c codepoint"}

test marpa-unicode-data-fold/c-2.0 {fold/c, bogus} -body {
    marpa unicode data fold/c bogus
} -returnCodes error -result {expected integer but got "bogus"}

testcases k {label codepoint primary} {
    a  97 65
    i 105 73
    k 107 75
    s 115 83
    @  64 64
} {
    # For the unexpected codepoints (>300), see (xx).
    test marpa-unicode-data-fold/c-2.$k "fold/c, $label" -body {
	marpa unicode data fold/c $codepoint
    } -result $primary
}

# # ## ### ##### ######## ############# #####################
cleanupTests
return
