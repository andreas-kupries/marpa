# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2017 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## marpa::parser

kt check Tcl     8.5
kt check tcltest 2

kt require support debug
kt require support debug::caller
kt require support oo::util
kt require support TclOO

kt local   support marpa
kt local   testing marpa::runtime::tcl

# # ## ### ##### ######## ############# #####################
## Activate method sequence checking for all instances
## Instances can dynamically activate method sequence checks too

oo::define marpa::parser mixin marpa::parser::sequencer

# # ## ### ##### ######## ############# #####################

kt source support/common.tcl
kt source support/fake-lex.tcl
kt source support/grexample.tcl
#kt source support/fake-parse.tcl
kt source support/fake-store.tcl

# # ## ### ##### ######## ############# #####################
##  1 constructor/3 (semstore, semantics, asthandler)
# # -- --- ----- -------- -------------
##  2 gate:/1       (obj)
##  3 symbols/1     (names)
##  4 action/*      (...)
##  5 rules/1       (rules)
##  6 parse/1       (start-sym)
# # -- --- ----- -------- -------------
##  7 enter/2       (syms semval)
##  8 eof/0         ()
# # -- --- ----- -------- -------------
##
## Sequence = 1([345]*2[345]*67*)?8

# # ## ### ##### ######## ############# #####################
## constructor - wrong args, initial state, calls

test marpa-parser-1.0.0 {constructor, wrong args, not enough} -body {
    marpa::parser new
} -returnCodes error -result {wrong # args: should be "marpa::parser new semstore semantics asthandler"}

test marpa-parser-1.0.1 {constructor, wrong args, not enough} -body {
    marpa::parser new STORE
} -returnCodes error -result {wrong # args: should be "marpa::parser new semstore semantics asthandler"}

test marpa-parser-1.0.2 {constructor, wrong args, not enough} -body {
    marpa::parser new STORE SEM
} -returnCodes error -result {wrong # args: should be "marpa::parser new semstore semantics asthandler"}

test marpa-parser-1.0.3 {constructor, wrong args, too many} -body {
    marpa::parser new STORE SEM AST X
} -returnCodes error -result {wrong # args: should be "marpa::parser new semstore semantics asthandler"}

# No state to query ?! CHECK

test marpa-parser-1.1 {constructor, sequencing} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER @
} -cleanup {
    PARSER destroy
    logged
} -result made

test marpa-parser-1.2 {constructor, externals} -body {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    logged
} -cleanup {
    PARSER destroy
} -result {}

test marpa-parser-1.3.0 {constructor, post-forbidden: enter} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER enter C V
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {Setup missing}

# # ## ### ##### ######## ############# #####################
## gate: - wrong args, state, sequencing

test marpa-parser-2.0.0 {gate:, wrong args, not enough} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER gate:
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {wrong # args: should be "PARSER gate: gate"}

test marpa-parser-2.0.1 {gate:, wrong args, too many} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER gate: OBJ X
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {wrong # args: should be "PARSER gate: gate"}

test marpa-parser-2.1.0 {gate:, result} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER gate: [log GATE]
} -cleanup {
    PARSER destroy
    logged
} -result {}

test marpa-parser-2.1.1 {gate:, externals} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    logclear
} -body {
    PARSER gate: [log GATE]
    logged
} -cleanup {
    PARSER destroy
} -result {}

test marpa-parser-2.1.2 {gate:, sequencing} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER gate: [log GATE]
    PARSER @
} -cleanup {
    PARSER destroy
    logged
} -result gated

# post-forbidden - see constructor (state: gated)

# # ## ### ##### ######## ############# #####################
## action - wrong args, state, sequencing

test marpa-parser-3.0.0 {action, wrong args, not enough} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER action
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {wrong # args: should be "PARSER action names"}

test marpa-parser-3.0.1 {action, wrong args, too many} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER action NAMES X
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {wrong # args: should be "PARSER action names"}

test marpa-parser-3.1.0 {action, result} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER action {}
} -cleanup {
    PARSER destroy
    logged
} -result {}

test marpa-parser-3.1.1 {action, externals} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    logclear
} -body {
    PARSER action {}
    logged
} -cleanup {
    PARSER destroy
} -result {}

test marpa-parser-3.1.2 {action, sequencing, pre gate} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER action {}
    PARSER @
} -cleanup {
    PARSER destroy
    logged
} -result made

test marpa-parser-3.1.3 {action, sequencing, post gate} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    PARSER gate: [log GATE]
} -body {
    PARSER action {}
    PARSER @
} -cleanup {
    PARSER destroy
    logged
} -result gated

# post-forbidden - see constructor (state: made)

# # ## ### ##### ######## ############# #####################
## symbols - wrong args, state, sequencing

test marpa-parser-4.0.0 {symbols, wrong args, not enough} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER symbols
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {wrong # args: should be "PARSER symbols names"}

test marpa-parser-4.0.1 {symbols, wrong args, too many} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER symbols NAMES X
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {wrong # args: should be "PARSER symbols names"}

test marpa-parser-4.1.0 {symbols, result} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER symbols {a b}
} -cleanup {
    PARSER destroy
    logged
} -result {0 1}

test marpa-parser-4.1.1 {symbols, externals} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    logclear
} -body {
    PARSER symbols {a b}
    logged
} -cleanup {
    PARSER destroy
} -result {}

test marpa-parser-4.1.2 {symbols, sequencing, pre gate} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER symbols {a b}
    PARSER @
} -cleanup {
    PARSER destroy
    logged
} -result made

test marpa-parser-4.1.3 {symbols, sequencing, post gate} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    PARSER gate: [log GATE]
} -body {
    PARSER symbols {a b}
    PARSER @
} -cleanup {
    PARSER destroy
    logged
} -result gated

# post-forbidden - see constructor (state: made)

# # ## ### ##### ######## ############# #####################
## rules - wrong args, state, sequencing

test marpa-parser-5.0.0 {rules, wrong args, not enough} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER rules
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {wrong # args: should be "PARSER rules rules"}

test marpa-parser-5.0.1 {rules, wrong args, too many} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER rules NAMES X
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {wrong # args: should be "PARSER rules rules"}

test marpa-parser-5.1.0 {rules, missing symbols} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    logclear
} -body {
    PARSER rules {
	{A := a}
	{B := b}
	{NAME := A}
	{NAME := B}
    }
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {Unknown symbol "A"}

test marpa-parser-5.1.1 {rules, result} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    PARSER symbols {NAME A B a b w}
    logclear
} -body {
    PARSER rules {
	{A := a}
	{B := b}
	{NAME := A}
	{NAME := B}
    }
} -cleanup {
    PARSER destroy
    logged
} -result {}

test marpa-parser-5.1.2 {rules, externals} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    PARSER symbols {NAME A B a b w}
    logclear
} -body {
    PARSER rules {
	{A := a}
	{B := b}
	{NAME := A}
	{NAME := B}
    }
    logged
} -cleanup {
    PARSER destroy
} -result {
  SEM C {add-rule 0 {marpa::semstd::builtin value}}
  SEM R {add-rule 0 {marpa::semstd::builtin value}} = {}
  SEM C {add-rule 1 {marpa::semstd::builtin value}}
  SEM R {add-rule 1 {marpa::semstd::builtin value}} = {}
  SEM C {add-rule 2 {marpa::semstd::builtin value}}
  SEM R {add-rule 2 {marpa::semstd::builtin value}} = {}
  SEM C {add-rule 3 {marpa::semstd::builtin value}}
  SEM R {add-rule 3 {marpa::semstd::builtin value}} = {}
}

test marpa-parser-5.1.3 {rules, sequencing, pre gate} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER rules {}
    PARSER @
} -cleanup {
    PARSER destroy
    logged
} -result made

test marpa-parser-5.1.4 {rules, sequencing, post gate} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    PARSER gate: [log GATE]
} -body {
    PARSER rules {}
    PARSER @
} -cleanup {
    PARSER destroy
    logged
} -result gated

# TODO: rule commands (i.e. structure of the rules given to the method)

# post-forbidden - see constructor (state: made)

# # ## ### ##### ######## ############# #####################
## parse - wrong args, state, sequencing

test marpa-parser-6.0.0 {parse, wrong args, not enough} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER parse
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {wrong # args: should be "PARSER parse name whitespace"}

test marpa-parser-6.0.1 {parse, wrong args, not enough} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER parse NAME
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {wrong # args: should be "PARSER parse name whitespace"}

test marpa-parser-6.0.2 {parse, wrong args, too many} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER parse NAME WHITESPACE X
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {wrong # args: should be "PARSER parse name whitespace"}

test marpa-parser-6.2.0 {parse, no gate} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GGBase PARSER
} -body {
    PARSER parse NAME W
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {Lexer missing}

test marpa-parser-6.3.0 {parse, post gate, result} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GGBase PARSER W
    PARSER gate: [log GATE]
    logclear
} -body {
    PARSER parse NAME W
} -cleanup {
    PARSER destroy
} -result {}

test marpa-parser-6.3.1 {parse, post gate, externals} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GGBase PARSER
    PARSER gate: [log GATE]
    logclear
} -body {
    PARSER parse NAME W
    logged
} -cleanup {
    PARSER destroy
} -result {
  GATE C {discard W}
  GATE R {discard W} = {}
  GATE C {acceptable {3 4}}
  GATE R {acceptable {3 4}} = {}
}

test marpa-parser-6.3.2 {parse, post gate, sequencing} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GGBase PARSER
    PARSER gate: [log GATE]
} -body {
    PARSER parse NAME {}
    PARSER @
} -cleanup {
    PARSER destroy
    logged
} -result active

test marpa-parser-6.4.0 {parse, post-forbidden: gate:} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
} -body {
    PARSER gate: [log GATE]
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {Parser is frozen}

test marpa-parser-6.4.1 {parse, post-forbidden: symbols} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
} -body {
    PARSER symbols {}
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {Parser is frozen}

test marpa-parser-6.4.2 {parse, post-forbidden: action} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
} -body {
    PARSER action {}
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {Parser is frozen}

test marpa-parser-6.4.3 {parse, post-forbidden: rules} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
} -body {
    PARSER rules {}
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {Parser is frozen}

test marpa-parser-6.4.4 {parse, post-forbidden: parse} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
} -body {
    PARSER parse NAME {}
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {Parser is frozen}

# # ## ### ##### ######## ############# #####################
## enter - wrong args, state, sequencing

test marpa-parser-7.0.0 {enter, wrong args, not enough} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER enter
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {wrong # args: should be "PARSER enter syms sv"}

test marpa-parser-7.0.1 {enter, wrong args, not enough} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER enter SYMLIST
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {wrong # args: should be "PARSER enter syms sv"}

test marpa-parser-7.0.2 {enter, wrong args, too many} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER enter SYMLIST VALUE X
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {wrong # args: should be "PARSER enter syms sv"}

test marpa-parser-7.1.0 {enter, incomplete, result} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
    logclear
} -body {
    PARSER enter 3 1
} -cleanup {
    PARSER destroy
    logged
} -result {}

test marpa-parser-7.1.1 {enter, incomplete, externals} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
    logclear
} -body {
    PARSER enter 3 1
    logged
} -cleanup {
    PARSER destroy
} -result {
  GATE C {acceptable 5}
  GATE R {acceptable 5} = {}
}

test marpa-parser-7.1.2 {enter, incomplete, sequencing} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
    logclear
} -body {
    PARSER enter 3 1
    PARSER @
} -cleanup {
    PARSER destroy
    logged
} -result active

test marpa-parser-7.2.0 {enter, complete, result} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
} -body {
    PARSER enter 4 1
} -cleanup {
    PARSER destroy
    logged
} -result {}

test marpa-parser-7.2.1 {enter, complete, externals} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
    logclear
} -body {
    PARSER enter 4 1
    logged
} -cleanup {
    PARSER destroy
} -result {
  SEM C {eval {token {id 4 start-es 0 end-es 1 dst 0 value 1} rule {id 1 start-es 0 end-es 1 dst 0 first 0 last 0} rule {id 3 start-es 0 end-es 1 dst 0 first 0 last 0}}}
  SEM R {eval {token {id 4 start-es 0 end-es 1 dst 0 value 1} rule {id 1 start-es 0 end-es 1 dst 0 first 0 last 0} rule {id 3 start-es 0 end-es 1 dst 0 first 0 last 0}}} = {}
  AST C {enter {}}
  AST R {enter {}} = {}
}

test marpa-parser-7.2.2 {enter, complete, sequencing} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
} -body {
    PARSER enter 4 1
    PARSER @
} -cleanup {
    PARSER destroy
    logged
} -result exhausted

test marpa-parser-7.3.0 {enter, incomplete, post-forbidden: gate:} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
    PARSER enter 3 1
} -body {
    PARSER gate: [log GATE]
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {Parser is frozen}

test marpa-parser-7.3.1 {enter, incomplete, post-forbidden: symbols} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
    PARSER enter 3 1
} -body {
    PARSER symbols {}
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {Parser is frozen}

test marpa-parser-7.3.2 {enter, incomplete, post-forbidden: action} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
    PARSER enter 3 1
} -body {
    PARSER action {}
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {Parser is frozen}

test marpa-parser-7.3.3 {enter, incomplete, post-forbidden: rules} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
    PARSER enter 3 1
} -body {
    PARSER rules {}
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {Parser is frozen}

test marpa-parser-7.3.4 {enter, incomplete, post-forbidden: parse} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
    PARSER enter 3 1
} -body {
    PARSER parse NAME {}
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {Parser is frozen}

test marpa-parser-7.4.0 {enter, complete, post-forbidden: gate:} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
    PARSER enter 4 1
} -body {
    PARSER gate: [log GATE]
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {Parser is frozen}

test marpa-parser-7.4.1 {enter, complete, post-forbidden: symbols} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
    PARSER enter 4 1
} -body {
    PARSER symbols {}
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {Parser is frozen}

test marpa-parser-7.4.2 {enter, complete, post-forbidden: action} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
    PARSER enter 4 1
} -body {
    PARSER action {}
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {Parser is frozen}

test marpa-parser-7.4.3 {enter, complete, post-forbidden: rules} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
    PARSER enter 4 1
} -body {
    PARSER rules {}
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {Parser is frozen}

test marpa-parser-7.4.4 {enter, complete, post-forbidden: parse} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
    PARSER enter 4 1
} -body {
    PARSER parse NAME {}
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {Parser is frozen}

test marpa-parser-7.4.5 {enter, complete, post-forbidden: enter} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
    PARSER enter 4 1
} -body {
    PARSER enter 3 1
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {After end of input}

# # ## ### ##### ######## ############# #####################
## eof - wrong args, state, sequencing

test marpa-parser-8.0 {eof, wrong args, too many} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER eof X
} -cleanup {
    PARSER destroy
    logged
} -returnCodes error -result {wrong # args: should be "PARSER eof"}

test marpa-parser-8.1.0 {eof, after construction} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER eof
} -cleanup {
    PARSER destroy
    logged
} -result {}

test marpa-parser-8.1.1 {eof, after construction, sequencing} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
} -body {
    PARSER eof
    PARSER @
} -cleanup {
    PARSER destroy
    logged
} -result done

test marpa-parser-8.1.2 {eof, after construction, externals} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    logclear
} -body {
    # eof is reported to ast handler, only
    list [PARSER eof] [logged]
} -cleanup {
    PARSER destroy
} -result {{} {
  AST C eof
  AST R eof = {}
}}

test marpa-parser-8.2.0 {eof, after gate:} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    PARSER gate: [log GATE]
} -body {
    PARSER eof
} -cleanup {
    PARSER destroy
    logged
} -result {}

test marpa-parser-8.2.1 {eof, after gate:, sequencing} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    PARSER gate: [log GATE]
} -body {
    PARSER eof
    PARSER @
} -cleanup {
    PARSER destroy
    logged
} -result done

test marpa-parser-8.2.2 {eof, after gate:, externals} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    PARSER gate: [log GATE]
    logclear
} -body {
    # eof is reported to ast handler, only
    list [PARSER eof] [logged]
} -cleanup {
    PARSER destroy
} -result {{} {
  AST C eof
  AST R eof = {}
}}

test marpa-parser-8.3.0 {eof, after configuration} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
} -body {
    PARSER eof
} -cleanup {
    PARSER destroy
    logged
} -result {}

test marpa-parser-8.3.1 {eof, after configuration, sequencing} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
} -body {
    PARSER eof
    PARSER @
} -cleanup {
    PARSER destroy
    logged
} -result done

test marpa-parser-8.3.2 {eof, after configuration, externals} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
    logclear
} -body {
    # eof is reported to ast handler, only
    list [PARSER eof] [logged]
} -cleanup {
    PARSER destroy
} -result {{} {
  GATE C {get-context context}
  GATE R {get-context context} = {}
  AST C {fail context}
  AST R {fail context} = {}
  AST C eof
  AST R eof = {}
}}

test marpa-parser-8.4.0 {eof, active} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
    PARSER enter 3 1
} -body {
    PARSER eof
} -cleanup {
    PARSER destroy
    logged
} -result {}

test marpa-parser-8.4.1 {eof, active, sequencing} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
    PARSER enter 3 1
} -body {
    PARSER eof
    PARSER @
} -cleanup {
    PARSER destroy
    logged
} -result done

test marpa-parser-8.4.2 {eof, active, externals} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
    PARSER enter 3 1
    logclear
} -body {
    # eof is reported to ast handler, only
    list [PARSER eof] [logged]
} -cleanup {
    PARSER destroy
} -result {{} {
  GATE C {get-context context}
  GATE R {get-context context} = {}
  AST C {fail context}
  AST R {fail context} = {}
  AST C eof
  AST R eof = {}
}}

test marpa-parser-8.5.0 {eof, when exhausted} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
    PARSER enter 4 1
} -body {
    PARSER eof
} -cleanup {
    PARSER destroy
    logged
} -result {}

test marpa-parser-8.5.1 {eof, when exhausted, sequencing} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
    PARSER enter 4 1
} -body {
    PARSER eof
    PARSER @
} -cleanup {
    PARSER destroy
    logged
} -result done

test marpa-parser-8.5.2 {eof, when exhausted, externals} -setup {
    marpa::parser create PARSER [log STORE] [log SEM] [log AST]
    GG PARSER
    PARSER enter 4 1
    logclear
} -body {
    # eof is reported to ast handler, only
    list [PARSER eof] [logged]
} -cleanup {
    PARSER destroy
} -result {{} {
  AST C eof
  AST R eof = {}
}}

# # ## ### ##### ######## ############# #####################
cleanupTests
