# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2017 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## marpa::slif::precedence

kt check Tcl     8.5
kt check tcltest 2

kt require support debug
kt require support debug::caller
kt require support oo::util
kt require support TclOO

kt local   support marpa::export::gc ;# Reformat - TODO: Refactor
kt local   support marpa::slif::container
kt local   testing marpa::slif::precedence
#kt local   testing marpa

# # ## ### ##### ######## ############# #####################

kt source support/common.tcl
kt source support/dirs.tcl
kt source support/gcontainer_state.tcl
kt source support/textutils.tcl

# # ## ### ##### ######## ############# #####################

proc FILL {container grcode spec} {
    lassign $spec lhs min alternatives
    foreach a $alternatives {
	set attr [lassign $a __ rhs prec]
	if {$grcode eq "l0"} {
	    dict unset attr action
	    dict unset attr mask
	    dict unset attr assoc
	}
	$container $grcode priority-rule $lhs $rhs $prec {*}$attr
    }
    return
}

proc NORM {grcode rewrite} {
    if {$grcode eq "l0"} {
	return [join [lrange $rewrite 0 end] \n]
    }
    join [lmap command $rewrite {
	if {[lindex $command 1] eq "remove"} {
	    # pass
	    set command
	} else {
	    # normalize the attribute order
	    set attr [lassign $command code type lhs rhs prec]
	    list $code $type $lhs $rhs $prec {*}[kt dictsort $attr]
	}
    }] \n
}

# # ## ### ##### ######## ############# #####################
## [ok] 2container \ API
## [ok] rewrite    /
## [ok] rewrite1   - Helper. Exposed for testing

# # ## ### ##### ######## ############# #####################
## 2container - Transfer a rewrite result into a container

test marpa-slif-precedence-2container-1.0 {2container, wrong args, not enough} -body {
    marpa::slif::precedence 2container
} -returnCodes error -result {wrong # args: should be "marpa::slif::precedence 2container rewrite container"}

test marpa-slif-precedence-2container-1.1 {2container, wrong args, not enough} -body {
    marpa::slif::precedence 2container W
} -returnCodes error -result {wrong # args: should be "marpa::slif::precedence 2container rewrite container"}

test marpa-slif-precedence-2container-1.2 {2container, wrong args, too many} -body {
    marpa::slif::precedence 2container W C X
} -returnCodes error -result {wrong # args: should be "marpa::slif::precedence 2container rewrite container"}

test marpa-slif-precedence-2container-2.0 {2container, nothing} -setup {
    set c [log GC] ; /trace GC
} -body {
    marpa::slif::precedence 2container {} $c
    string trim [logged "\n"]
} -cleanup {
    unset c
} -result {}

test marpa-slif-precedence-2container-2.1 {2container, all cases} -setup {
    set c [log GC] ; /trace GC
} -body {
    marpa::slif::precedence 2container {
	{g1 remove X}
	{g1 priority-rule X {A B}}
	{l0 remove Y}
	{l0 priority-rule Y {C D}}
    } $c
    string trim [logged "\n"]
} -cleanup {
    unset c
} -result [norm-trace [trdir p2c21]]

# # ## ### ##### ######## ############# #####################
## rewrite1 - rewrite of single precedenced rule

test marpa-slif-precedence-rewrite1-1.0 {rewrite1, wrong args, not enough} -body {
    marpa::slif::precedence rewrite1
} -returnCodes error -result {wrong # args: should be "marpa::slif::precedence rewrite1 grcode lhs min alternatives"}

test marpa-slif-precedence-rewrite1-1.1 {rewrite1, wrong args, not enough} -body {
    marpa::slif::precedence rewrite1 G
} -returnCodes error -result {wrong # args: should be "marpa::slif::precedence rewrite1 grcode lhs min alternatives"}

test marpa-slif-precedence-rewrite1-1.2 {rewrite1, wrong args, not enough} -body {
    marpa::slif::precedence rewrite1 G L
} -returnCodes error -result {wrong # args: should be "marpa::slif::precedence rewrite1 grcode lhs min alternatives"}

test marpa-slif-precedence-rewrite1-1.3 {rewrite1, wrong args, not enough} -body {
    marpa::slif::precedence rewrite1 G L M
} -returnCodes error -result {wrong # args: should be "marpa::slif::precedence rewrite1 grcode lhs min alternatives"}

test marpa-slif-precedence-rewrite1-1.4 {rewrite1, wrong args, too many} -body {
    marpa::slif::precedence rewrite1 G L M A X
} -returnCodes error -result {wrong # args: should be "marpa::slif::precedence rewrite1 grcode lhs min alternatives"}

set E_rules {E -3 {
    {priority N 0
	assoc left  action {cmd N} mask {0} name number}
    {priority {PO E PC} 0
	assoc group action {cmd G} mask {1 0 1} name sub-expression}
    {priority {E POW E} -1
	assoc right action {cmd ^} mask {0 1 0} name power}
    {priority {E MUL E} -2
	assoc left  action {cmd *} mask {0 1 0} name multiplier}
    {priority {E DIV E} -2
	assoc left  action {cmd /} mask {0 1 0} name divider}
    {priority {E ADD E} -3
	assoc left  action {cmd +} mask {0 1 0} name adder}
    {priority {E SUB E} -3
	assoc left  action {cmd -} mask {0 1 0} name subtractor}
}}

set E_g1_trace {
    {g1 remove E}
    {g1 priority-rule E E((3)) 0 action {special hide} mask 0 assoc left}
    {g1 priority-rule E((3)) E((2))               0 action {special hide} assoc left mask 0}
    {g1 priority-rule E((2)) E((1))               0 action {special hide} assoc left mask 0}
    {g1 priority-rule E((1)) E((0))                0 action {special hide} assoc left mask 0}
    {g1 priority-rule E((0)) N                      0 action {cmd N} assoc left mask 0 name number}
    {g1 priority-rule E((0)) {PO E((3)) PC}        0 action {cmd G} assoc left mask {1 0 1} name sub-expression}
    {g1 priority-rule E((1)) {E((0)) POW E((1))}  0 action {cmd ^} assoc left mask {0 1 0} name power}
    {g1 priority-rule E((2)) {E((2)) MUL E((1))} 0 action {cmd *} assoc left mask {0 1 0} name multiplier}
    {g1 priority-rule E((2)) {E((2)) DIV E((1))} 0 action {cmd /} assoc left mask {0 1 0} name divider}
    {g1 priority-rule E((3)) {E((3)) ADD E((2))} 0 action {cmd +} assoc left mask {0 1 0} name adder}
    {g1 priority-rule E((3)) {E((3)) SUB E((2))} 0 action {cmd -} assoc left mask {0 1 0} name subtractor}
}

set E_l0_trace {
    {l0 remove E}
    {l0 priority-rule E E((3)) 0}
    {l0 priority-rule E((3)) E((2)) 0}
    {l0 priority-rule E((2)) E((1)) 0}
    {l0 priority-rule E((1)) E((0)) 0}
    {l0 priority-rule E((0)) N 0 name number}
    {l0 priority-rule E((0)) {PO E((3)) PC} 0 name sub-expression}
    {l0 priority-rule E((1)) {E((0)) POW E((1))} 0 name power}
    {l0 priority-rule E((2)) {E((2)) MUL E((1))} 0 name multiplier}
    {l0 priority-rule E((2)) {E((2)) DIV E((1))} 0 name divider}
    {l0 priority-rule E((3)) {E((3)) ADD E((2))} 0 name adder}
    {l0 priority-rule E((3)) {E((3)) SUB E((2))} 0 name subtractor}
}

set E_l0_trace_B {
    {l0 remove E}
    {l0 priority-rule E E((3)) 0}
    {l0 priority-rule E((3)) E((2)) 0}
    {l0 priority-rule E((2)) E((1)) 0}
    {l0 priority-rule E((1)) E((0)) 0}
    {l0 priority-rule E((0)) N 0 name number}
    {l0 priority-rule E((0)) {PO E((0)) PC} 0 name sub-expression}
    {l0 priority-rule E((1)) {E((1)) POW E((0))} 0 name power}
    {l0 priority-rule E((2)) {E((2)) MUL E((1))} 0 name multiplier}
    {l0 priority-rule E((2)) {E((2)) DIV E((1))} 0 name divider}
    {l0 priority-rule E((3)) {E((3)) ADD E((2))} 0 name adder}
    {l0 priority-rule E((3)) {E((3)) SUB E((2))} 0 name subtractor}
}

# Notes on E_rules and results
# The input rules are
##
#   E ::=
#   ( 0)     N                                        .tightest
#   ( 0)   | ( E )	group	(explicit grouping) .tightest
#   (-1)   | E ^ E	right	(powers)            .
#   (-2)   | E * E	left	(factors)           .
#   (-3)   | E + E	left	(terms)             .loosest
#
# I left out SUB and DIV as they do not expand on the explanation

# With the precedences written out and encodes through separate rules
# this becomes:
##
#   E          ::= TERM
#   TERM   (-3)::= TERM   + FACTOR |  FACTOR
#   FACTOR (-2)::= FACTOR * POWER  |  POWER
#   POWER  (-1)::= ATOM   ^ POWER  |  ATOM
#   ATOM       ::= ( TERM )        |  N
#                  ^rule              ^spine
# where
#   TERM   == E((3))
#   FACTOR == E((2))
#   POWER  == E((1))
#   ATOM   == E((0))
#
# In the above the spine is written distributed across the lhs symbols (see ^spine).
# In the result below the spine is written together (lrange 2 5).
# Further, the location of the lhs in the ^rule encodes the association.
# TERMs and FACTORs are left associated, POWERs are right.

set k 0
foreach {grcode specvar rvar} {
    g1 E_rules E_g1_trace
    l0 E_rules E_l0_trace
} {
    incr k
    # Note: In calling rewrite1 with E_rules we are pushing attributes into the command, even for L0.

    test marpa-slif-precedence-rewrite1-2.$k "rewrite1 $grcode $specvar" -body {
	NORM $grcode [marpa::slif::precedence rewrite1 $grcode {*}[set $specvar]]
    } -result [NORM $grcode [set $rvar]]
}

# # ## ### ##### ######## ############# #####################
## rewrite - handle an entire container (g1 and l0 rules)

test marpa-slif-precedence-rewrite-1.0 {rewrite, wrong args, not enough} -body {
    marpa::slif::precedence rewrite
} -returnCodes error -result {wrong # args: should be "marpa::slif::precedence rewrite container"}

test marpa-slif-precedence-rewrite-1.1 {rewrite, wrong args, too many} -body {
    marpa::slif::precedence rewrite C X
} -returnCodes error -result {wrong # args: should be "marpa::slif::precedence rewrite container"}

set k 0
foreach {grcode specvar rvar rstate} {
    g1 E_rules E_g1_trace   g1_prewrite
    l0 E_rules E_l0_trace_B l0_prewrite
} {
    incr k
    # Note: For L0 the rules are stripped of attributes, making assoc "left" by default.
    #       This affects the results (left-associative POW, no group assoc for PO/PC)

    test marpa-slif-precedence-rewrite-2.$k "rewrite $grcode $specvar" -setup {
	# Fill container from ((specvar))
	marpa::slif::container create GC
	FILL GC $grcode [set $specvar]
    } -body {
	NORM $grcode [marpa::slif::precedence rewrite GC]
    } -cleanup {
	GC destroy
    } -result [NORM $grcode [set $rvar]]

    test marpa-slif-precedence-rewrite-3.$k "rewrite $grcode $specvar" -setup {
	# Fill container from ((specvar))
	marpa::slif::container create GC
	FILL GC $grcode [set $specvar]
    } -body {
	marpa::slif::precedence 2container \
	    [marpa::slif::precedence rewrite GC] \
	    GC
	gc-format [GC serialize]
    } -cleanup {
	GC destroy
    } -result [string trimright [fget [trdir $rstate]]]
}

# # ## ### ##### ######## ############# #####################
rename FILL {}
rename NORM {}
cleanupTests
return
