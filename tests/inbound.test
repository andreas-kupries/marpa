# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2016 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## marpa::inbound

kt check Tcl     8.5
kt check tcltest 2

kt require support debug
kt require support debug::caller
kt require support oo::util
kt require support TclOO
kt require support tcl::chan::string ;# string channel for 'read' method.

kt local   support marpa::c
kt local   testing marpa::runtime::tcl

# # ## ### ##### ######## ############# #####################
## Activate method sequence checking for all instances
## Instances can dynamically activate method sequence checks too

oo::define marpa::inbound mixin marpa::inbound::sequencer

# # ## ### ##### ######## ############# #####################

kt source support/common.tcl

# # ## ### ##### ######## ############# #####################
## 1 constructor/2 (postprocessor)
## 2 enter/1       (string)
## 3 read/1        (channel)
## 4 eof/0         ()
##
## Sequence = 1[23]*4
## See p_inbound.tcl, mark <<s>> (multiple)
##
#        |state
# -------+------+
# method |ready |
# -------+------+-------------------------
# enter  | OK   | 4.2.0, 5.2.0
# read   | OK   | 5.1.1
# eof    | OK   | 3.1, 4.2.2, 5.2.2
# -------+------+
# method |done  |
# -------+------+-------------------------
# enter  | FAIL | 3.2.1
# read   | FAIL | 3.2.2
# eof    | FAIL | 3.2.0
# -------+------+

# # ## ### ##### ######## ############# #####################
## constructor - wrong args, initial state, calls

test marpa-inbound-1.0.0 {constructor, wrong args, not enough} -body {
    marpa::inbound new
} -returnCodes error -result {wrong # args: should be "marpa::inbound new postprocessor"}

test marpa-inbound-1.0.1 {constructor, wrong args, too many} -body {
    marpa::inbound new GATE X
} -returnCodes error -result {wrong # args: should be "marpa::inbound new postprocessor"}

test marpa-inbound-1.1 {constructor, initial state} -setup {
    marpa::inbound create IN [log GATE]
} -body {
    list [IN location?] [logged]
} -cleanup {
    IN destroy
} -result {-1 {}}

# # ## ### ##### ######## ############# #####################
## eof - wrong args, state (reject enter/read/eof after 1st call)

test marpa-inbound-3.0 {eof, wrong args, too many} -setup {
    marpa::inbound create IN [log GATE]
} -body {
    IN eof X
} -cleanup {
    IN destroy
    logged
} -returnCodes error -result {wrong # args: should be "IN eof"}

test marpa-inbound-3.1 {eof, results, external calls} -setup {
    marpa::inbound create IN [log GATE]
} -body {
    # eof is reported to the postprocessor, only.
    list [IN eof] [logged]
} -cleanup {
    IN destroy
} -result {{} {
  GATE C eof
  GATE R eof = {}
}}

test marpa-inbound-3.2.0 {eof, post-forbids eof} -setup {
    marpa::inbound create IN [log GATE]
    IN eof
} -body {
IN eof
} -cleanup {
    IN destroy
    logged
} -returnCodes error -result {Unable to process input after EOF}

test marpa-inbound-3.2.1 {eof, post-forbids enter} -setup {
    marpa::inbound create IN [log GATE]
    IN eof
} -body {
    IN enter something
} -cleanup {
    IN destroy
    logged
} -returnCodes error -result {Unable to process input after EOF}

test marpa-inbound-3.2.2 {eof, post-forbids read} -setup {
    marpa::inbound create IN [log GATE]
    IN eof
} -body {
    IN read FAKE-CHAN
} -cleanup {
    IN destroy
    logged
} -returnCodes error -result {Unable to process input after EOF}

test marpa-inbound-3.2.3 {eof, post-allows location?} -setup {
    marpa::inbound create IN [log GATE]
    IN eof
} -body {
    IN location?
} -cleanup {
    IN destroy
    logged
} -result -1

# # ## ### ##### ######## ############# #####################
## enter - wrong args, state changes, call sequences

test marpa-inbound-4.0.0 {enter, wrong args, not enough} -setup {
    marpa::inbound create IN [log GATE]
} -body {
    IN enter
} -cleanup {
    IN destroy
    logged
} -returnCodes error -result {wrong # args: should be "IN enter string"}

test marpa-inbound-4.0.1 {enter, wrong args, too many} -setup {
    marpa::inbound create IN [log GATE]
} -body {
    IN enter STRING X
} -cleanup {
    IN destroy
    logged
} -returnCodes error -result {wrong # args: should be "IN enter string"}

test marpa-inbound-4.1.0 {enter, results, state changes, external calls} -setup {
    marpa::inbound create IN [log GATE]
} -body {
    list [IN enter FOO] [IN location?] [logged]
} -cleanup {
    IN destroy
} -result {{} 2 {
  GATE C {enter F 0}
  GATE R {enter F 0} = {}
  GATE C {enter O 1}
  GATE R {enter O 1} = {}
  GATE C {enter O 2}
  GATE R {enter O 2} = {}
}}

test marpa-inbound-4.1.1 {enter nothing, results, state changes, external calls} -setup {
    marpa::inbound create IN [log GATE]
} -body {
    list [IN enter {}] [IN location?] [logged]
} -cleanup {
    IN destroy
} -result {{} -1 {}}

test marpa-inbound-4.2.0 {enter, post-allows enter} -setup {
    marpa::inbound create IN [log GATE]
    IN enter {}
} -body {
    IN enter {}
} -cleanup {
    IN destroy
    logged
} -result {}

test marpa-inbound-4.2.1 {enter, post-allows location?} -setup {
    marpa::inbound create IN [log GATE]
    IN enter {}
} -body {
    IN location?
} -cleanup {
    IN destroy
    logged
} -result -1

test marpa-inbound-4.2.2 {enter, post-allows eof} -setup {
    marpa::inbound create IN [log GATE]
    IN enter {}
} -body {
    IN eof
} -cleanup {
    IN destroy
    logged
} -result {}

test marpa-inbound-4.2.3 {enter, post-allows eof} -setup {
    set chan [tcl::chan::string {}]
    marpa::inbound create IN [log GATE]
    IN enter {}
} -body {
    IN read $chan
} -cleanup {
    IN destroy
    logged
    close $chan
} -result {}

# # ## ### ##### ######## ############# #####################
## read - wrong args, state changes, call sequences

test marpa-inbound-5.0.0 {read, wrong args, not enough} -setup {
    marpa::inbound create IN [log GATE]
} -body {
    IN read
} -cleanup {
    IN destroy
    logged
} -returnCodes error -result {wrong # args: should be "IN read chan"}

test marpa-inbound-5.0.1 {read, wrong args, too many} -setup {
    marpa::inbound create IN [log GATE]
} -body {
    IN read CHAN X
} -cleanup {
    IN destroy
    logged
} -returnCodes error -result {wrong # args: should be "IN read chan"}

test marpa-inbound-5.1.0 {read, results, state changes, external calls} -setup {
    set chan [tcl::chan::string FOO]
    marpa::inbound create IN [log GATE]
} -body {
    list [IN read $chan] [IN location?] [logged]
} -cleanup {
    IN destroy
    close $chan
} -result {{} 2 {
  GATE C {enter F 0}
  GATE R {enter F 0} = {}
  GATE C {enter O 1}
  GATE R {enter O 1} = {}
  GATE C {enter O 2}
  GATE R {enter O 2} = {}
}}

test marpa-inbound-5.1.1 {read nothing, results, state changes, external calls} -setup {
    set chan [tcl::chan::string {}]
    marpa::inbound create IN [log GATE]
} -body {
    list [IN read $chan] [IN location?] [logged]
} -cleanup {
    IN destroy
    close $chan
} -result {{} -1 {}}

test marpa-inbound-5.2.0 {read, post-allows enter} -setup {
    set chan [tcl::chan::string {}]
    marpa::inbound create IN [log GATE]
    IN read $chan
} -body {
    IN enter {}
} -cleanup {
    IN destroy
    logged
    close $chan
} -result {}

test marpa-inbound-5.2.1 {read, post-allows location?} -setup {
    set chan [tcl::chan::string {}]
    marpa::inbound create IN [log GATE]
    IN read $chan
} -body {
    IN location?
} -cleanup {
    IN destroy
    logged
    close $chan
} -result -1

test marpa-inbound-5.2.2 {read, post-allows eof} -setup {
    set chan [tcl::chan::string {}]
    marpa::inbound create IN [log GATE]
    IN read $chan
} -body {
    IN eof
} -cleanup {
    IN destroy
    logged
    close $chan
} -result {}

test marpa-inbound-5.2.3 {read, post-allows enter} -setup {
    set chan [tcl::chan::string {}]
    marpa::inbound create IN [log GATE]
    IN read $chan
} -body {
    IN enter {}
} -cleanup {
    IN destroy
    logged
    close $chan
} -result {}

# # ## ### ##### ######## ############# #####################
cleanupTests
