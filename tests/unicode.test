# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2017-2018 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## marpa::unicode

kt check Tcl     8.5
kt check tcltest 2

kt require support debug
kt require support debug::caller
kt require support oo::util
kt require support TclOO

kt local   testing marpa::unicode

# # ## ### ##### ######## ############# #####################

kt source support/common.tcl

# # ## ### ##### ######## ############# #####################
## [ok] norm-class
## [ok] negate-class
## [ok] point
## [ok] unfold
## [ok] fold/c
## [ok] 2utf
## [ok] 2asbr
## [ok] asbr-format
## [ok] 2char
##

# # ## ### ##### ######## ############# #####################
## unfold - Expand a charclass to include all case-equivalencet characters.

test marpa-unicode-unfold-1.0 {unfold, wrong args, not enough} -body {
    marpa unicode unfold
} -returnCodes error -result {wrong # args: should be "marpa unicode unfold codes"}

test marpa-unicode-unfold-1.1 {unfold, wrong args, too many} -body {
    marpa unicode unfold CODES X
} -returnCodes error -result {wrong # args: should be "marpa unicode unfold codes"}

test marpa-unicode-unfold-2.0 {unfold, apply} -body {
    marpa unicode unfold {{48 57} {97 122}}
    #                     ^-[0-9] ^-[a-z]
} -result {{48 57} {65 90} {97 122} {304 305} 383 8490}
#          ^-[0-9] ^-[A-Z] ^-[a-z]  ^-see below.......
#  304 - Latin Capital Letter I With Dot Above
#  305 - Latin Small Letter Dotless I
#  383 - Latin Small Letter Long S
# 8490 - Kelvin Sign
# Via http://www.codetable.net/decimal/<NUMBER>
# See also (xx)

# # ## ### ##### ######## ############# #####################
## fold/c - Map uni(code)points to their primary uni(code)points in
##          their case-equivalence class.

test marpa-unicode-fold/c-1.0 {fold/c, wrong args, not enough} -body {
    marpa unicode fold/c
} -returnCodes error -result {wrong # args: should be "marpa unicode fold/c codes"}

test marpa-unicode-fold/c-1.1 {fold/c, wrong args, too many} -body {
    marpa unicode fold/c CODES X
} -returnCodes error -result {wrong # args: should be "marpa unicode fold/c codes"}

test marpa-unicode-fold/c-2.0 {fold/c, apply} -body {
    marpa unicode fold/c {0 97 13 9 8706 67}
    #        vv <---------- ^^a --> A (65) Everything else is self-equivalent
} -result {0 65 13 9 8706 67}

# # ## ### ##### ######## ############# #####################
## point - character to uni(code)point

test marpa-unicode-point-1.0 {point, wrong args, not enough} -body {
    marpa unicode point
} -returnCodes error -result {wrong # args: should be "marpa unicode point character"}

test marpa-unicode-point-1.1 {point, wrong args, too many} -body {
    marpa unicode point CHARACTER X
} -returnCodes error -result {wrong # args: should be "marpa unicode point character"}

testcases k {char code} {
    \0     0
    A      65
    \r     13
    \t     9
    \u2202 8706
    CHAR   67
} {
    test marpa-unicode-point-2.$k "point, $code" -body {
	marpa unicode point $char
    } -result $code
}

# # ## ### ##### ######## ############# #####################
## 2utf - uni(code)point to utf8 encoding (list of bytes (as decimal integers))

test marpa-unicode-2utf-1.0 {2utf, wrong args, not enough} -body {
    marpa unicode 2utf
} -returnCodes error -result {wrong # args: should be "marpa unicode 2utf code ?flags?"}

test marpa-unicode-2utf-1.1 {2utf, wrong args, too many} -body {
    marpa unicode 2utf CODE FLAGS X
} -returnCodes error -result {wrong # args: should be "marpa unicode 2utf code ?flags?"}

test marpa-unicode-2utf-1.2 {2utf, ok num args, bad codepoint, type} -body {
    marpa unicode 2utf CODE
} -returnCodes error -result {Expected integer for codepoint in [0...1114111], got "CODE"}

test marpa-unicode-2utf-1.3 {2utf, ok num args, bad codepoint, out of range} -body {
    marpa unicode 2utf -1
} -returnCodes error -result {Expected integer for codepoint in [0...1114111], got "-1"}

test marpa-unicode-2utf-1.4 {2utf, ok num args, bad codepoint, out of range} -body {
    marpa unicode 2utf 1114112
} -returnCodes error -result {Expected integer for codepoint in [0...1114111], got "1114112"}

test marpa-unicode-2utf-1.5 {2utf, ok num args, ok codepoint, bad flags, type} -body {
    marpa unicode 2utf 0 0
} -returnCodes error -result {bad marpatcl_uflags "0": must be all, cesu, mutf, or tcl}

test marpa-unicode-2utf-1.6 {2utf, ok num args, ok codepoint, bad flags value} -body {
    marpa unicode 2utf 32 foo
} -returnCodes error -result {bad marpatcl_uflags "foo": must be all, cesu, mutf, or tcl}

test marpa-unicode-2utf-1.7 {2utf, ok num args, ok codepoint, ok flags} -body {
    marpa unicode 2utf 32 tcl
} -result 32

testcases k {code full tcl} {
    0         {0}                {192 128}		  
    127       {127}		 {127}		  
    128       {194 128}	         {194 128}	  
    2047      {223 191}	         {223 191}	  
    2048      {224 160 128}	 {224 160 128}	  
    65535     {239 191 191}	 {239 191 191}	  
    65536     {240 144 128 128}  {237 160 128 237 176 128}
    0x10FFFE  {244 143 191 190}  {237 175 191 237 191 190}
    0x10FFFF  {244 143 191 191}  {237 175 191 237 191 191}
    0x10F60F  {244 143 152 143}  {237 175 189 237 184 143}
} {
    test marpa-unicode-2utf-2.$k.0 "2utf, $code, full" -body {
	marpa unicode 2utf $code
    } -result $full

    test marpa-unicode-2utf-2.$k.1 "2utf, $code, tcl" -body {
	marpa unicode 2utf $code tcl
    } -result $tcl
}

# # ## ### ##### ######## ############# #####################
## 2char - uni(code)point to bmp encoding (list of chars (as decimal integers))

test marpa-unicode-2char-1.0 {2char, wrong args, not enough} -body {
    marpa unicode 2char
} -returnCodes error -result {wrong # args: should be "marpa unicode 2char code"}

test marpa-unicode-2char-1.1 {2char, wrong args, too many} -body {
    marpa unicode 2char CODE X
} -returnCodes error -result {wrong # args: should be "marpa unicode 2char code"}

test marpa-unicode-2char-1.2 {2char, ok num args, bad codepoint, type} -body {
    marpa unicode 2char CODE
} -returnCodes error -result {Expected integer for codepoint in [0...1114111], got "CODE"}

test marpa-unicode-2char-1.3 {2char, ok num args, bad codepoint, out of range} -body {
    marpa unicode 2char -1
} -returnCodes error -result {Expected integer for codepoint in [0...1114111], got "-1"}

test marpa-unicode-2char-1.4 {2char, ok num args, bad codepoint, out of range} -body {
    marpa unicode 2char 1114112
} -returnCodes error -result {Expected integer for codepoint in [0...1114111], got "1114112"}

test marpa-unicode-2char-1.5 {2char, ok num args, ok codepoint} -body {
    marpa unicode 2char 32
} -result 32

testcases k {code chars} {
    0         {0}                
    127       {127}		 
    128       {128}	         
    2047      {2047}	         
    2048      {2048}	 
    65535     {65535}	 
    65536     {55296 56320}  
    0x10FFFE  {56319 57342}
    0x10FFFF  {56319 57343}
    0x10F60F  {56317 56847}
} {
    test marpa-unicode-2char-2.$k "2char, $code" -body {
	marpa unicode 2char $code
    } -result $chars
}

# # ## ### ##### ######## ############# #####################
## norm-class - Maximally merge uni(code)points and ranges in the char class.

test marpa-unicode-norm-class-1.0 {norm-class, wrong args, not enough} -body {
    marpa unicode norm-class
} -returnCodes error -result {wrong # args: should be "marpa unicode norm-class charclass"}

test marpa-unicode-norm-class-1.1 {norm-class, wrong args, too many} -body {
    marpa unicode norm-class ITEMS X
} -returnCodes error -result {wrong # args: should be "marpa unicode norm-class charclass"}

testcases k {charclass normalized notes} {
    {6 3}         {3 6}    {sort ascending}
    {4 3}         {{3 4}}  {merge adjacent}
    {{1 5} {6 8}} {{1 8}}  {ditto}
    {{1 5} {0 8}} {{0 8}}  {cover}
    {{1 5} {3 8}} {{1 8}}  {overlap & extend}
    {3}           {3}      {single item}
    {{4 7}}       {{4 7}}  {ditto}
} {
    test marpa-unicode-norm-class-2.$k "norm-class, $charclass" -body {
	marpa unicode norm-class $charclass
    } -result $normalized
}

testcases k {charclass message notes} {
    {-1}          {Expected integer for codepoint in [0...1114111], got "-1"} {out of range, under}
    {500000000}   {Expected integer for codepoint in [0...1114111], got "500000000"} {out of range, over, regardless of mode}
    {2 {3 3 4} 4} {Expected 2-element list for range} {too many elements for interval/range}
    {2 {} 4}      {Expected 2-element list for range} {not enough element for interval/range}
    {2 {-1 3} 4}  {Expected integer for range start in [0...1114111], got "-1"} {out of range, under}
    {2 {3 500000000} 4} {Expected integer for range end in [0...1114111], got "500000000"} {out of range, over, regardless of mode}
    {2 {5 2} 4} {Unexpected empty range (5 > 2)} {Range validation, start vs end}
    {2 {{} 3} 4} {Expected integer for range start in [0...1114111], got ""} {Range validation, start}
    {2 {3 {}} 4} {Expected integer for range end in [0...1114111], got ""} {Range validation, end}
    {bogus} {Expected 2-element list for range} {Most bogus is convertible to list => range validation}
    {\{} {Expected codepoint or range, got neither} {Not even a list}
} {
    test marpa-unicode-norm-class-3.$k "norm-class, bad $charclass" -body {
	marpa unicode norm-class $charclass
    } -returnCodes error -result $message
}

# # ## ### ##### ######## ############# #####################
## negate-class - Complement a char class.

test marpa-unicode-negate-class-1.0 {negate-class, wrong args, not enough} -body {
    marpa unicode negate-class
} -returnCodes error -result {wrong # args: should be "marpa unicode negate-class charclass"}

test marpa-unicode-negate-class-1.1 {negate-class, wrong args, too many} -body {
    marpa unicode negate-class ITEMS X
} -returnCodes error -result {wrong # args: should be "marpa unicode negate-class charclass"}

test marpa-unicode-negate-class-2.0 {negate-class} -body {
    marpa unicode negate-class {{65 67} {97 99} 104}
} -result {{0 64} {68 96} {100 103} {105 1114111}}

test marpa-unicode-negate-class-2.1 {negate-class, lower limit} -body {
    marpa unicode negate-class {0 {65 67} {97 99} 104}
} -result {{1 64} {68 96} {100 103} {105 1114111}}

test marpa-unicode-negate-class-2.2 {negate-class, upper limit} -body {
    marpa unicode negate-class {{65 67} {97 99} {104 1114111}}
} -result {{0 64} {68 96} {100 103}}

test marpa-unicode-negate-class-2.3 {negate-class, none} -body {
    marpa unicode negate-class {}
} -result {{0 1114111}}

test marpa-unicode-negate-class-2.4 {negate-class, all} -body {
    marpa unicode negate-class {{0 1114111}}
} -result {}

# # ## ### ##### ######## ############# #####################
## 2asbr - Convert char class (uni(code)points and ranges)
##         into ASBR form (Alternate Squences of Byte Ranges)

test marpa-unicode-2asbr-1.0 {2asbr, wrong args, not enough} -body {
    marpa unicode 2asbr
} -returnCodes error -result {wrong # args: should be "marpa unicode 2asbr charclass ?flags?"}

test marpa-unicode-2asbr-1.1 {2asbr, wrong args, too many} -body {
    marpa unicode 2asbr CHARCLASS FLAGS X
} -returnCodes error -result {wrong # args: should be "marpa unicode 2asbr charclass ?flags?"}

testcases k {cclass theerror} {
    CLASS         {Expected 2-element list for range}
    -1            {Expected integer for codepoint in [0...1114111], got "-1"}
    1114112       {Expected integer for codepoint in [0...1114111], got "1114112"}
    {{a b c}}     {Expected 2-element list for range}
    {{a b}}       {Expected integer for range start in [0...1114111], got "a"}
    {{-1 0}}      {Expected integer for range start in [0...1114111], got "-1"}
    {{0 -1}}      {Expected integer for range end in [0...1114111], got "-1"}
    {{1114112 0}} {Expected integer for range start in [0...1114111], got "1114112"}
    {{0 1114112}} {Expected integer for range end in [0...1114111], got "1114112"}
} {
    test marpa-unicode-2asbr-1.2.$k {2asbr, bad args} -body {
	marpa unicode 2asbr $cclass ;# flags irrelevant
    } -returnCodes error -result $theerror
}

testcases k {charclass fasbr fpretty tasbr tpretty} {
    {{0 16}}
    {{{0 16}}}
    " [00-10]\n"
    {{{192 192} {128 128}} {{1 16}}}
    " [c0]   [80]   \n|[01-10]\n"
    
    {{0 16} {33 45}}
    {{{0 16}} {{33 45}}}
    " [00-10]\n|[21-2d]\n"
    {{{192 192} {128 128}} {{1 16}} {{33 45}}}
    " [c0]   [80]   \n|[01-10]\n|[21-2d]\n"
    
    {{0 127}}
    {{{0 127}}}
    " [00-7f]\n"
    {{{192 192} {128 128}} {{1 127}}}
    " [c0]   [80]   \n|[01-7f]\n"
    
    {{0 2047}}
    {{{0 127}} {{194 223} {128 191}}}
    " [00-7f]\n|[c2-df][80-bf]\n"
    {{{192 192} {128 128}} {{1 127}} {{194 223} {128 191}}}
    " [c0]   [80]   \n|[01-7f]\n|[c2-df][80-bf]\n"
    
    {{0 65535}}
    {{{0 127}} {{194 223} {128 191}} {{224 224} {160 191} {128 191}} {{225 236} {128 191} {128 191}} {{237 237} {128 159} {128 191}} {{238 239} {128 191} {128 191}}}
    " [00-7f]\n|[c2-df][80-bf]\n|[e0]   [a0-bf][80-bf]\n|[e1-ec][80-bf][80-bf]\n|[ed]   [80-9f][80-bf]\n|[ee-ef][80-bf][80-bf]\n"
    {{{192 192} {128 128}} {{1 127}} {{194 223} {128 191}} {{224 224} {160 191} {128 191}} {{225 236} {128 191} {128 191}} {{237 237} {128 159} {128 191}} {{238 239} {128 191} {128 191}}}
    " [c0]   [80]   \n|[01-7f]\n|[c2-df][80-bf]\n|[e0]   [a0-bf][80-bf]\n|[e1-ec][80-bf][80-bf]\n|[ed]   [80-9f][80-bf]\n|[ee-ef][80-bf][80-bf]\n"
    
    {{0 0x10ffff}}
    {{{0 127}} {{194 223} {128 191}} {{224 224} {160 191} {128 191}} {{225 236} {128 191} {128 191}} {{237 237} {128 159} {128 191}} {{238 239} {128 191} {128 191}} {{240 240} {144 191} {128 191} {128 191}} {{241 243} {128 191} {128 191} {128 191}} {{244 244} {128 143} {128 191} {128 191}}}
    " [00-7f]\n|[c2-df][80-bf]\n|[e0]   [a0-bf][80-bf]\n|[e1-ec][80-bf][80-bf]\n|[ed]   [80-9f][80-bf]\n|[ee-ef][80-bf][80-bf]\n|[f0]   [90-bf][80-bf][80-bf]\n|[f1-f3][80-bf][80-bf][80-bf]\n|[f4]   [80-8f][80-bf][80-bf]\n"
    {{{192 192} {128 128}} {{1 127}} {{194 223} {128 191}} {{224 224} {160 191} {128 191}} {{225 236} {128 191} {128 191}} {{237 237} {128 159} {128 191}} {{238 239} {128 191} {128 191}} {{237 237} {160 175} {128 191} {237 237} {176 191} {128 191}}}
    " [c0]   [80]   \n|[01-7f]\n|[c2-df][80-bf]\n|[e0]   [a0-bf][80-bf]\n|[e1-ec][80-bf][80-bf]\n|[ed]   [80-9f][80-bf]\n|[ee-ef][80-bf][80-bf]\n|[ed]   [a0-af][80-bf][ed]   [b0-bf][80-bf]\n"
} {
    test marpa-unicode-2asbr-2.$k.0 "2asbr, $charclass, full" -body {
	marpa unicode 2asbr $charclass
    } -result $fasbr

    test marpa-unicode-asbr-format-2.$k.0 "asbr-format, $charclass, full" -body {
	marpa unicode asbr-format $fasbr
    } -result $fpretty

    test marpa-unicode-2asbr-2.$k.1 "2asbr, $charclass, tcl" -body {
	marpa unicode 2asbr $charclass tcl
    } -result $tasbr

    test marpa-unicode-asbr-format-2.$k.1 "asbr-format, $charclass, tcl" -body {
	marpa unicode asbr-format $tasbr
    } -result $tpretty
}

# # ## ### ##### ######## ############# #####################
## asbr-format - Convert ASBR into a human-readable form.

test marpa-unicode-asbr-format-1.0 {asbr-format, wrong args, not enough} -body {
    marpa unicode asbr-format
} -returnCodes error -result {wrong # args: should be "marpa unicode asbr-format asbr ?compact?"}

test marpa-unicode-asbr-format-1.1 {asbr-format, wrong args, too many} -body {
    marpa unicode asbr-format CLASS COMPACT X
} -returnCodes error -result {wrong # args: should be "marpa unicode asbr-format asbr ?compact?"}

# # ## ### ##### ######## ############# #####################
cleanupTests
