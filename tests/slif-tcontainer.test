# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2017-present Andreas Kupries
# # ## ### ##### ######## ############# #####################
## marpa::slif::container

kt check Tcl     8.5
kt check tcltest 2

kt require support debug
kt require support debug::caller
kt require support oo::util
kt require support TclOO
kt require support fileutil ;# cat

kt local   testing marpa::slif::precedence
kt local   testing marpa::slif::container
kt local   testing marpa::slif::literal::redux
kt local   testing marpa::slif::literal::reduce::2tcl
kt local   testing marpa::slif::literal::reduce::2c4tcl

# # ## ### ##### ######## ############# #####################
## TODO: Testing inspection

# # ## ### ##### ######## ############# #####################

kt source support/common.tcl
kt source support/dirs.tcl
kt source support/gcontainer_state.tcl
kt source support/grammars.tcl
kt source support/textutils.tcl

# # ## ### ##### ######## ############# #####################
## Setup dynamic parts of the testsuite
## Currently only importing the `bootstrap/marpa-tcl-slif`

exec [td]/grammars/setup.sh

# # ## ### ##### ######## ############# #####################
##  1 constructor/0

# # ## ### ##### ######## ############# #####################
## constructor - wrong args, initial state, calls

test marpa-slif-container-constructor-1.0 {constructor, wrong args, not enough} -body {
    marpa::slif::container create
} -returnCodes error -result {wrong # args: should be "marpa::slif::container create objectName ?arg ...?"}

test marpa-slif-container-constructor-1.1 {constructor, wrong args, too many} -body {
    marpa::slif::container create CONTAINER X
} -returnCodes error -result {wrong # args: should be "marpa::slif::container create CONTAINER"}

test marpa-slif-container-constructor-1.2 {constructor, wrong args, too many} -body {
    marpa::slif::container new X
} -returnCodes error -result {wrong # args: should be "marpa::slif::container new"}

# # ## ### ##### ######## ############# #####################
## Trace driven container states
## The traces are those from the semantics for the non-erroneous test grammars.
## (With comment lines removed)

test-grammar-file-format ID slif

# TODO: Base this on presence of gcstate, i.e. result file ?

test-grammar-map ctrace --> k id ctrace base {
    set input [norm-trace-gc $ctrace]

    # Ignore traces for parse and/or semantic errors.
    if {[string match {*GC error*} $input]} continue

    #puts ZZZ\t[join [split $input \n] \nZZZ\t]

    test marpa-slif-container-by-trace-1.[ID $k]---${id} "by-trace $id" -setup {
	marpa::slif::container create GC
    } -body {
	if {[catch {
	    # Trace of GC method calls filling the container.
	    eval $input
	} msg]} {
	    puts $::errorInfo
	    set msg
	} else {
	    GC validate ;# Semantics should create only valid containers.
	    # This performs checks beyond what is done during the
	    # incremental construction from the trace. Like ensuring
	    # that all RHS are defined.
	    gc-format [GC serialize]
	}
    } -cleanup {
	unset -nocomplain msg
	GC destroy
    } -result [string trimright [fget $base/gcstate]]
}

unset -nocomplain input

# # ## ### ##### ######## ############# #####################
## Container bulk load (deserialization)

test-grammar-file-format ID gcstate

test-grammar-files gcstate --> k id gcstate {
    set input [fget $gcstate]

    test marpa-slif-container-deserialize-1.[ID $k]---${id} "deserialize $id" -setup {
	marpa::slif::container create GC
    } -body {
	GC deserialize [g-extract $input]
	GC validate ;# Deserialize should create only valid
		     # containers, if serialization is from a valid
		     # container.
	gc-format [GC serialize]
	# The container created from deserialization should regenerate
	# the input when serialized again.
    } -cleanup {
	GC destroy
    } -result [string trimright $input]

    unset input
}

# # ## ### ##### ######## ############# #####################
## Reduction I [Tcl]: Tcl engine, see "s_parser.tcl", generalized
## Note, based on gcstate, reuse format.

# TODO: Fix up when unicode mode becomes irrelevant

test-grammar-map gcstate --> k id gcstate base {
    set input [g-extract [fget $gcstate]]

    # Ignore containers without literals to reduce
    if {![dict exists $input l0 literal]} continue

    # Ignore cases without a result to check
    if {![file exists $base/gcr_tcl]} continue

    test marpa-slif-container-reduce-tcl-1.[ID $k]---${id} "reduce-tcl $id" -setup {
	marpa::slif::container create GC
	GC deserialize $input
    } -body {
	# Reduce literals for a Tcl engine
	marpa::slif::literal::redux GC \
	    marpa::slif::literal::reduce::2tcl
	# Reduction should not invalidate the container
	GC validate
	gc-format [GC serialize]
    } -cleanup {
	unset -nocomplain msg
	GC destroy
    } -result [test-grammar-result $base gcr_tcl]
}

unset -nocomplain input

# # ## ### ##### ######## ############# #####################
## Reduction II [C-lang]: Byte-based engine on UTF-8 input.
## Note, based on gcstate, reuse format.

# TODO: Fix up when unicode mode becomes irrelevant

test-grammar-map gcstate --> k id gcstate base {
    set input [g-extract [fget $gcstate]]

    # Ignore containers without literals to reduce
    if {![dict exists $input l0 literal]} continue

    # Ignore cases without a result to check
    if {![file exists $base/gcr_c]} continue

    test marpa-slif-container-reduce-c-1.[ID $k]---${id} "reduce-c $id" -setup {
	marpa::slif::container create GC
	GC deserialize $input
    } -body {
	# Reduce literals for a C engine with Tcl encoding
	marpa::slif::literal::redux GC \
	    marpa::slif::literal::reduce::2c4tcl
	# Reduction should not invalidate the container
	GC validate
	gc-format [GC serialize]
    } -cleanup {
	unset -nocomplain msg
	GC destroy
    } -result [test-grammar-result $base gcr_c]
}

unset -nocomplain input

# # ## ### ##### ######## ############# #####################
## Precedence rewrite

test-grammar-file-format ID prewrite

test-grammar-map prewrite --> k id prewrite base {
    test marpa-slif-container-prewrite-1.[ID $k]---${id} "precedence rewrite $id" -setup {
	marpa::slif::container create GC
	GC deserialize [g-extract [fget $base/gcstate]]
    } -body {
	marpa::slif::precedence 2container \
	    [marpa::slif::precedence rewrite GC] \
	    GC
	GC validate ;# Rewrite should not invalidate the container
	gc-format [GC serialize]
    } -cleanup {
	unset -nocomplain msg
	GC destroy
    } -result [string trimright [fget $prewrite]]
}

# # ## ### ##### ######## ############# #####################
## TODO slif::container -- Test individual methods

# # ## ### ##### ######## ############# #####################
cleanupTests
