# -*- tcl -*-
##
# This template is BSD-licensed.
# (c) 2017 Template - Andreas Kupries http://wiki.tcl.tk/andreas%20kupries
#                                     http://core.tcl.tk/akupries/
##
# (c) <Year> Grammar <Name> By <Writer>
##
##	TLex (*) Engine for SLIF Grammar "<Name>"
##	Generated On <GenerationTime>
##		  By <Operator>
##		 Via <Tool>
##
##	(*) Tcl-based Lexer-only

package provide <Name> <Version>

# # ## ### ##### ######## #############
## Requisites

package require marpa	      ;# marpa::slif::container
package require Tcl 8.5       ;# -- Foundation
package require TclOO         ;# -- Implies Tcl 8.5 requirement.
package require debug         ;# Tracing
package require debug::caller ;#

# # ## ### ##### ######## #############

debug define marpa/grammar/<Name>
debug prefix marpa/grammar/<Name> {[debug caller] | }

# # ## ### ##### ######## #############

oo::class create <Name> {
    superclass marpa::engine::tcl::lex

    # Lifecycle: No constructor needed. No state.
    # All data is embedded as literals into methods

    # Declare the various things needed by the engine for its
    # operation.  To get the information the base class will call on
    # these methods in the proper order. The methods simply return the
    # requested information. Their base-class implementations simply
    # throw errors, thus preventing the construction of an incomplete
    # lexer.
    
    method Characters {} {
	debug.marpa/grammar/<Name>
	# Literals: The directly referenced (allowed) characters.
	return {
	    @CHR:<#>        #
	    @CHR:<'>        '
	    @CHR:<*>        *
	    @CHR:<+>        +
	    @CHR:<,>        ,
	    @CHR:<->        -
	    @CHR:<1>        1
	    @CHR:<:>        :
	    @CHR:<<>        <
	    @CHR:<=>        =
	    @CHR:<>>        >
	    @CHR:<^>        ^
	    @CHR:<a>        a
	    @CHR:<b>        b
	    @CHR:<c>        c
	    @CHR:<d>        d
	    @CHR:<e>        e
	    @CHR:<f>        f
	    @CHR:<g>        g
	    @CHR:<h>        h
	    @CHR:<i>        i
	    @CHR:<k>        k
	    @CHR:<l>        l
	    @CHR:<m>        m
	    @CHR:<n>        n
	    @CHR:<o>        o
	    @CHR:<p>        p
	    @CHR:<r>        r
	    @CHR:<s>        s
	    @CHR:<t>        t
	    @CHR:<u>        u
	    @CHR:<v>        v
	    @CHR:<w>        w
	    @CHR:<x>        x
	    @CHR:<y>        y
	    @CHR:<|>        |
	    @CHR:<~>        ~
	    {@CHR:<\50>}    \50
	    {@CHR:<\51>}    \51
	    {@CHR:<\73>}    \73
	    {@CHR:<\133>}   \133
	    {@CHR:<\134>}   \134
	    {@CHR:<\135>}   \135
	    {@CHR:<\173>}   \173
	    {@CHR:<\175>}   \175
	}
    }
    
    method Classes {} {
	debug.marpa/grammar/<Name>
	# Literals: The character classes in use
	return {
	    @CLS:<+->                                          {[+\055]}
	    @CLS:<A-Za-z>                                      {[A-Za-z]}
	    @RAN:<01>                                          {[01]}
	    @RAN:<03>                                          {[0-3]}
	    @RAN:<07>                                          {[0-7]}
	    {@^CLS:<\7-\r'0-7\134\u2028-\u2029>}               {[^\007-\r'0-7\134\u2028\u2029]}
	    {@^CLS:<\7-\r'\134\u2028-\u2029>}                  {[^\007-\r'\134\u2028\u2029]}
	    {@^CLS:<\7-\r'\134\u2028-\u2029[:xdigit:]>}        {[^\007-\r'\134\u2028\u2029[:xdigit:]]}
	    {@^CLS:<\7-\r-0-7\134-\135\u2028-\u2029>}          {[^\007-\r\0550-7\134\135\u2028\u2029]}
	    {@^CLS:<\7-\r-\134-\135\u2028-\u2029>}             {[^\007-\r\055\134\135\u2028\u2029]}
	    {@^CLS:<\7-\r-\134-\135\u2028-\u2029[:xdigit:]>}   {[^\007-\r\055\134\135\u2028\u2029[:xdigit:]]}
	    {@^CLS:<\n-\r\u2028-\u2029>}                       {[^\n-\r\u2028\u2029]}
	    {@CLS:<\134a-bfnrtv>}                              {[\134abfnrtv]}
	    {@CLS:<\n-\r\u2028-\u2029>}                        {[\n-\r\u2028\u2029]}
	    {@CLS:<_[:alnum:]>}                                {[_[:alnum:]]}
	    {@CLS:<_[:alnum:][:space:]>}                       {[_[:alnum:][:space:]]}
	    {@NCC:<[:alnum:]>}                                 {[[:alnum:]]}
	    {@NCC:<[:digit:]>}                                 {[[:digit:]]}
	    {@NCC:<[:space:]>}                                 {[[:space:]]}
	    {@NCC:<[:xdigit:]>}                                {[[:xdigit:]]}
	}
    }
    
    method Lexemes {} {
	debug.marpa/grammar/<Name>
	# Lexer API: Lexeme symbols (Cannot be terminal).
	return {
	    @LEX:@CHR:<*>              1
	    @LEX:@CHR:<+>              1
	    @LEX:@CHR:<,>              1
	    @LEX:@CHR:<=>              1
	    @LEX:@STR:<:default>       1
	    @LEX:@STR:<:discard>       1
	    @LEX:@STR:<:lexeme>        1
	    @LEX:@STR:<:start>         1
	    @LEX:@STR:<=>>             1
	    @LEX:@STR:<action>         1
	    @LEX:@STR:<assoc>          1
	    @LEX:@STR:<by>             1
	    @LEX:@STR:<completed>      1
	    @LEX:@STR:<current>        1
	    @LEX:@STR:<default>        1
	    @LEX:@STR:<discard>        1
	    @LEX:@STR:<event>          1
	    @LEX:@STR:<fatal>          1
	    @LEX:@STR:<forgiving>      1
	    @LEX:@STR:<group>          1
	    @LEX:@STR:<high>           1
	    @LEX:@STR:<inaccessible>   1
	    @LEX:@STR:<is>             1
	    @LEX:@STR:<latm>           1
	    @LEX:@STR:<left>           1
	    @LEX:@STR:<lexeme>         1
	    @LEX:@STR:<lexer>          1
	    @LEX:@STR:<low>            1
	    @LEX:@STR:<name>           1
	    @LEX:@STR:<null-ranking>   1
	    @LEX:@STR:<null>           1
	    @LEX:@STR:<nulled>         1
	    @LEX:@STR:<off>            1
	    @LEX:@STR:<ok>             1
	    @LEX:@STR:<on>             1
	    @LEX:@STR:<pause>          1
	    @LEX:@STR:<predicted>      1
	    @LEX:@STR:<priority>       1
	    @LEX:@STR:<proper>         1
	    @LEX:@STR:<rank>           1
	    @LEX:@STR:<right>          1
	    @LEX:@STR:<separator>      1
	    @LEX:@STR:<start>          1
	    @LEX:@STR:<symbol>         1
	    @LEX:@STR:<warn>           1
	    boolean                    1
	    {@LEX:@CHR:<\50>}          1
	    {@LEX:@CHR:<\51>}          1
	    {@LEX:@CHR:<\73>}          1
	    {@LEX:@CHR:<\173>}         1
	    {@LEX:@CHR:<\175>}         1
	    {array descriptor}         1
	    {bare name}                1
	    {before or after}          1
	    {bracketed name}           1
	    {character class}          1
	    {op declare bnf}           1
	    {op declare match}         1
	    {op equal priority}        1
	    {op loosen}                1
	    {Perl name}                1
	    {reserved action name}     1
	    {reserved event name}      1
	    {signed integer}           1
	    {single quoted name}       1
	    {single quoted string}     1
	    {standard name}            1
	}
    }
    
    method Discards {} {
	debug.marpa/grammar/<Name>
	# Discarded symbols (whitespace)
	return {
	    {hash comment}
	    whitespace
	}
    }
    
    method Symbols {} {
	# Non-lexeme, non-literal symbols
	debug.marpa/grammar/<Name>
	return {
	    @STR:<::=>
	    @STR:<::>
	    {@STR:<:\135>}
	    @STR:<:default>
	    @STR:<:discard>
	    @STR:<:i>
	    @STR:<:ic>
	    @STR:<:lexeme>
	    @STR:<:start>
	    @STR:<=>>
	    {@STR:<\133:>}
	    {@STR:<\133^>}
	    @STR:<action>
	    @STR:<after>
	    @STR:<assoc>
	    @STR:<before>
	    @STR:<by>
	    @STR:<completed>
	    @STR:<current>
	    @STR:<default>
	    @STR:<discard>
	    @STR:<event>
	    @STR:<fatal>
	    @STR:<forgiving>
	    @STR:<g1length>
	    @STR:<g1start>
	    @STR:<group>
	    @STR:<high>
	    @STR:<inaccessible>
	    @STR:<is>
	    @STR:<latm>
	    @STR:<left>
	    @STR:<length>
	    @STR:<lexeme>
	    @STR:<lexer>
	    @STR:<lhs>
	    @STR:<low>
	    @STR:<name>
	    @STR:<null-ranking>
	    @STR:<null>
	    @STR:<nulled>
	    @STR:<off>
	    @STR:<ok>
	    @STR:<on>
	    @STR:<pause>
	    @STR:<predicted>
	    @STR:<priority>
	    @STR:<proper>
	    @STR:<rank>
	    @STR:<right>
	    @STR:<rule>
	    @STR:<separator>
	    @STR:<start>
	    @STR:<symbol>
	    @STR:<value>
	    @STR:<values>
	    @STR:<warn>
	    @STR:<||>
	    {a character class}
	    {a single quoted string}
	    {array descriptor left bracket}
	    {array descriptor right bracket}
	    {bracketed name string}
	    {cc close}
	    {cc element and more}
	    {cc open}
	    {cc range completion}
	    {cc range completion post short octal escape}
	    {cc range completion post short unicode escape}
	    {character class modifier}
	    {character class modifiers}
	    control
	    {double colon}
	    escape
	    {escaped cc char}
	    {escaped cc char details}
	    {escaped cc element}
	    {escaped cc element details}
	    {escaped string char}
	    {escaped string char details}
	    {hash comment}
	    {hash comment body}
	    {hash comment char}
	    hex
	    integer
	    {leading octal}
	    {non empty string}
	    {nullable cc}
	    {nullable cc post short octal escape}
	    {nullable cc post short unicode escape}
	    {nullable string}
	    {nullable string post short octal escape}
	    {nullable string post short unicode escape}
	    octal
	    {one or more word characters}
	    {Perl identifier}
	    {plain cc char}
	    {plain cc char without hex}
	    {plain cc char without octal}
	    {plain cc element}
	    {plain cc element without hex}
	    {plain cc element without octal}
	    {plain string char}
	    {plain string char without hex}
	    {plain string char without octal}
	    {posix char class}
	    {posix char class name}
	    {result item descriptor}
	    {result item descriptor list}
	    {result item descriptor separator}
	    sign
	    {string close}
	    {string open}
	    {terminated hash comment}
	    {unterminated final hash comment}
	    {vertical space char}
	    whitespace
	    {zero or more word characters}
	}
    }

    method Rules {} {
	# Rules for all symbols but the literals
	debug.marpa/grammar/<Name>
	return {
	    {@LEX:@CHR:<*> := @CHR:<*>}
	    {@LEX:@CHR:<+> := @CHR:<+>}
	    {@LEX:@CHR:<,> := @CHR:<,>}
	    {@LEX:@CHR:<=> := @CHR:<=>}
	    {@LEX:@STR:<:default> := @STR:<:default>}
	    {@LEX:@STR:<:discard> := @STR:<:discard>}
	    {@LEX:@STR:<:lexeme> := @STR:<:lexeme>}
	    {@LEX:@STR:<:start> := @STR:<:start>}
	    {@LEX:@STR:<=>> := @STR:<=>>}
	    {@LEX:@STR:<action> := @STR:<action>}
	    {@LEX:@STR:<assoc> := @STR:<assoc>}
	    {@LEX:@STR:<by> := @STR:<by>}
	    {@LEX:@STR:<completed> := @STR:<completed>}
	    {@LEX:@STR:<current> := @STR:<current>}
	    {@LEX:@STR:<default> := @STR:<default>}
	    {@LEX:@STR:<discard> := @STR:<discard>}
	    {@LEX:@STR:<event> := @STR:<event>}
	    {@LEX:@STR:<fatal> := @STR:<fatal>}
	    {@LEX:@STR:<forgiving> := @STR:<forgiving>}
	    {@LEX:@STR:<group> := @STR:<group>}
	    {@LEX:@STR:<high> := @STR:<high>}
	    {@LEX:@STR:<inaccessible> := @STR:<inaccessible>}
	    {@LEX:@STR:<is> := @STR:<is>}
	    {@LEX:@STR:<latm> := @STR:<latm>}
	    {@LEX:@STR:<left> := @STR:<left>}
	    {@LEX:@STR:<lexeme> := @STR:<lexeme>}
	    {@LEX:@STR:<lexer> := @STR:<lexer>}
	    {@LEX:@STR:<low> := @STR:<low>}
	    {@LEX:@STR:<name> := @STR:<name>}
	    {@LEX:@STR:<null-ranking> := @STR:<null-ranking>}
	    {@LEX:@STR:<null> := @STR:<null>}
	    {@LEX:@STR:<nulled> := @STR:<nulled>}
	    {@LEX:@STR:<off> := @STR:<off>}
	    {@LEX:@STR:<ok> := @STR:<ok>}
	    {@LEX:@STR:<on> := @STR:<on>}
	    {@LEX:@STR:<pause> := @STR:<pause>}
	    {@LEX:@STR:<predicted> := @STR:<predicted>}
	    {@LEX:@STR:<priority> := @STR:<priority>}
	    {@LEX:@STR:<proper> := @STR:<proper>}
	    {@LEX:@STR:<rank> := @STR:<rank>}
	    {@LEX:@STR:<right> := @STR:<right>}
	    {@LEX:@STR:<separator> := @STR:<separator>}
	    {@LEX:@STR:<start> := @STR:<start>}
	    {@LEX:@STR:<symbol> := @STR:<symbol>}
	    {@LEX:@STR:<warn> := @STR:<warn>}
	    {@STR:<::=> := @CHR:<:> @CHR:<:> @CHR:<=>}
	    {@STR:<::> := @CHR:<:> @CHR:<:>}
	    {@STR:<:default> := @CHR:<:> @CHR:<d> @CHR:<e> @CHR:<f> @CHR:<a> @CHR:<u> @CHR:<l> @CHR:<t>}
	    {@STR:<:discard> := @CHR:<:> @CHR:<d> @CHR:<i> @CHR:<s> @CHR:<c> @CHR:<a> @CHR:<r> @CHR:<d>}
	    {@STR:<:i> := @CHR:<:> @CHR:<i>}
	    {@STR:<:ic> := @CHR:<:> @CHR:<i> @CHR:<c>}
	    {@STR:<:lexeme> := @CHR:<:> @CHR:<l> @CHR:<e> @CHR:<x> @CHR:<e> @CHR:<m> @CHR:<e>}
	    {@STR:<:start> := @CHR:<:> @CHR:<s> @CHR:<t> @CHR:<a> @CHR:<r> @CHR:<t>}
	    {@STR:<=>> := @CHR:<=> @CHR:<>>}
	    {@STR:<action> := @CHR:<a> @CHR:<c> @CHR:<t> @CHR:<i> @CHR:<o> @CHR:<n>}
	    {@STR:<after> := @CHR:<a> @CHR:<f> @CHR:<t> @CHR:<e> @CHR:<r>}
	    {@STR:<assoc> := @CHR:<a> @CHR:<s> @CHR:<s> @CHR:<o> @CHR:<c>}
	    {@STR:<before> := @CHR:<b> @CHR:<e> @CHR:<f> @CHR:<o> @CHR:<r> @CHR:<e>}
	    {@STR:<by> := @CHR:<b> @CHR:<y>}
	    {@STR:<completed> := @CHR:<c> @CHR:<o> @CHR:<m> @CHR:<p> @CHR:<l> @CHR:<e> @CHR:<t> @CHR:<e> @CHR:<d>}
	    {@STR:<current> := @CHR:<c> @CHR:<u> @CHR:<r> @CHR:<r> @CHR:<e> @CHR:<n> @CHR:<t>}
	    {@STR:<default> := @CHR:<d> @CHR:<e> @CHR:<f> @CHR:<a> @CHR:<u> @CHR:<l> @CHR:<t>}
	    {@STR:<discard> := @CHR:<d> @CHR:<i> @CHR:<s> @CHR:<c> @CHR:<a> @CHR:<r> @CHR:<d>}
	    {@STR:<event> := @CHR:<e> @CHR:<v> @CHR:<e> @CHR:<n> @CHR:<t>}
	    {@STR:<fatal> := @CHR:<f> @CHR:<a> @CHR:<t> @CHR:<a> @CHR:<l>}
	    {@STR:<forgiving> := @CHR:<f> @CHR:<o> @CHR:<r> @CHR:<g> @CHR:<i> @CHR:<v> @CHR:<i> @CHR:<n> @CHR:<g>}
	    {@STR:<g1length> := @CHR:<g> @CHR:<1> @CHR:<l> @CHR:<e> @CHR:<n> @CHR:<g> @CHR:<t> @CHR:<h>}
	    {@STR:<g1start> := @CHR:<g> @CHR:<1> @CHR:<s> @CHR:<t> @CHR:<a> @CHR:<r> @CHR:<t>}
	    {@STR:<group> := @CHR:<g> @CHR:<r> @CHR:<o> @CHR:<u> @CHR:<p>}
	    {@STR:<high> := @CHR:<h> @CHR:<i> @CHR:<g> @CHR:<h>}
	    {@STR:<inaccessible> := @CHR:<i> @CHR:<n> @CHR:<a> @CHR:<c> @CHR:<c> @CHR:<e> @CHR:<s> @CHR:<s> @CHR:<i> @CHR:<b> @CHR:<l> @CHR:<e>}
	    {@STR:<is> := @CHR:<i> @CHR:<s>}
	    {@STR:<latm> := @CHR:<l> @CHR:<a> @CHR:<t> @CHR:<m>}
	    {@STR:<left> := @CHR:<l> @CHR:<e> @CHR:<f> @CHR:<t>}
	    {@STR:<length> := @CHR:<l> @CHR:<e> @CHR:<n> @CHR:<g> @CHR:<t> @CHR:<h>}
	    {@STR:<lexeme> := @CHR:<l> @CHR:<e> @CHR:<x> @CHR:<e> @CHR:<m> @CHR:<e>}
	    {@STR:<lexer> := @CHR:<l> @CHR:<e> @CHR:<x> @CHR:<e> @CHR:<r>}
	    {@STR:<lhs> := @CHR:<l> @CHR:<h> @CHR:<s>}
	    {@STR:<low> := @CHR:<l> @CHR:<o> @CHR:<w>}
	    {@STR:<name> := @CHR:<n> @CHR:<a> @CHR:<m> @CHR:<e>}
	    {@STR:<null-ranking> := @CHR:<n> @CHR:<u> @CHR:<l> @CHR:<l> @CHR:<-> @CHR:<r> @CHR:<a> @CHR:<n> @CHR:<k> @CHR:<i> @CHR:<n> @CHR:<g>}
	    {@STR:<null> := @CHR:<n> @CHR:<u> @CHR:<l> @CHR:<l>}
	    {@STR:<nulled> := @CHR:<n> @CHR:<u> @CHR:<l> @CHR:<l> @CHR:<e> @CHR:<d>}
	    {@STR:<off> := @CHR:<o> @CHR:<f> @CHR:<f>}
	    {@STR:<ok> := @CHR:<o> @CHR:<k>}
	    {@STR:<on> := @CHR:<o> @CHR:<n>}
	    {@STR:<pause> := @CHR:<p> @CHR:<a> @CHR:<u> @CHR:<s> @CHR:<e>}
	    {@STR:<predicted> := @CHR:<p> @CHR:<r> @CHR:<e> @CHR:<d> @CHR:<i> @CHR:<c> @CHR:<t> @CHR:<e> @CHR:<d>}
	    {@STR:<priority> := @CHR:<p> @CHR:<r> @CHR:<i> @CHR:<o> @CHR:<r> @CHR:<i> @CHR:<t> @CHR:<y>}
	    {@STR:<proper> := @CHR:<p> @CHR:<r> @CHR:<o> @CHR:<p> @CHR:<e> @CHR:<r>}
	    {@STR:<rank> := @CHR:<r> @CHR:<a> @CHR:<n> @CHR:<k>}
	    {@STR:<right> := @CHR:<r> @CHR:<i> @CHR:<g> @CHR:<h> @CHR:<t>}
	    {@STR:<rule> := @CHR:<r> @CHR:<u> @CHR:<l> @CHR:<e>}
	    {@STR:<separator> := @CHR:<s> @CHR:<e> @CHR:<p> @CHR:<a> @CHR:<r> @CHR:<a> @CHR:<t> @CHR:<o> @CHR:<r>}
	    {@STR:<start> := @CHR:<s> @CHR:<t> @CHR:<a> @CHR:<r> @CHR:<t>}
	    {@STR:<symbol> := @CHR:<s> @CHR:<y> @CHR:<m> @CHR:<b> @CHR:<o> @CHR:<l>}
	    {@STR:<value> := @CHR:<v> @CHR:<a> @CHR:<l> @CHR:<u> @CHR:<e>}
	    {@STR:<values> := @CHR:<v> @CHR:<a> @CHR:<l> @CHR:<u> @CHR:<e> @CHR:<s>}
	    {@STR:<warn> := @CHR:<w> @CHR:<a> @CHR:<r> @CHR:<n>}
	    {@STR:<||> := @CHR:<|> @CHR:<|>}
	    {boolean := @RAN:<01>}
	    {control := {@CLS:<\134a-bfnrtv>}}
	    {escape := {@CHR:<\134>}}
	    {hex := {@NCC:<[:xdigit:]>}}
	    {integer + {@NCC:<[:digit:]>}}
	    {octal := @RAN:<07>}
	    {sign := @CLS:<+->}
	    {whitespace + {@NCC:<[:space:]>}}
	    {{@LEX:@CHR:<\50>} := {@CHR:<\50>}}
	    {{@LEX:@CHR:<\51>} := {@CHR:<\51>}}
	    {{@LEX:@CHR:<\73>} := {@CHR:<\73>}}
	    {{@LEX:@CHR:<\173>} := {@CHR:<\173>}}
	    {{@LEX:@CHR:<\175>} := {@CHR:<\175>}}
	    {{@STR:<:\135>} := @CHR:<:> {@CHR:<\135>}}
	    {{@STR:<\133:>} := {@CHR:<\133>} @CHR:<:>}
	    {{@STR:<\133^>} := {@CHR:<\133>} @CHR:<^>}
	    {{a character class} := {cc open} {cc element and more}}
	    {{a single quoted string} := {string open} {non empty string}}
	    {{array descriptor left bracket} := {@CHR:<\133>}}
	    {{array descriptor left bracket} := {@CHR:<\133>} whitespace}
	    {{array descriptor right bracket} := whitespace {@CHR:<\135>}}
	    {{array descriptor right bracket} := {@CHR:<\135>}}
	    {{array descriptor} := {array descriptor left bracket} {result item descriptor list} {array descriptor right bracket}}
	    {{bare name} := {one or more word characters}}
	    {{before or after} := @STR:<after>}
	    {{before or after} := @STR:<before>}
	    {{bracketed name string} + {@CLS:<_[:alnum:][:space:]>}}
	    {{bracketed name} := @CHR:<<> {bracketed name string} @CHR:<>>}
	    {{cc close} := {@CHR:<\135>}}
	    {{cc element and more} := {escaped cc element}}
	    {{cc element and more} := {plain cc element}}
	    {{cc open} := {@CHR:<\133>}}
	    {{cc open} := {@STR:<\133^>}}
	    {{cc range completion post short octal escape} := @CHR:<-> {escaped cc char}}
	    {{cc range completion post short octal escape} := @CHR:<-> {plain cc char} {nullable cc}}
	    {{cc range completion post short octal escape} := {cc close}}
	    {{cc range completion post short octal escape} := {escaped cc element}}
	    {{cc range completion post short octal escape} := {plain cc element without octal}}
	    {{cc range completion post short unicode escape} := @CHR:<-> {escaped cc char}}
	    {{cc range completion post short unicode escape} := @CHR:<-> {plain cc char} {nullable cc}}
	    {{cc range completion post short unicode escape} := {cc close}}
	    {{cc range completion post short unicode escape} := {escaped cc element}}
	    {{cc range completion post short unicode escape} := {plain cc element without hex}}
	    {{cc range completion} := @CHR:<-> {escaped cc char}}
	    {{cc range completion} := @CHR:<-> {plain cc char} {nullable cc}}
	    {{cc range completion} := {nullable cc}}
	    {{character class modifiers} * {character class modifier}}
	    {{character class modifier} := @STR:<:i>}
	    {{character class modifier} := @STR:<:ic>}
	    {{character class} := {a character class} {character class modifiers}}
	    {{double colon} := @STR:<::>}
	    {{escaped cc char details} := @CHR:<u> hex hex hex hex {nullable cc}}
	    {{escaped cc char details} := @CHR:<u> hex hex hex {nullable cc post short unicode escape}}
	    {{escaped cc char details} := @CHR:<u> hex hex {nullable cc post short unicode escape}}
	    {{escaped cc char details} := @CHR:<u> hex {nullable cc post short unicode escape}}
	    {{escaped cc char details} := @CHR:<x> hex hex {nullable cc}}
	    {{escaped cc char details} := control {nullable cc}}
	    {{escaped cc char details} := octal octal {nullable cc post short octal escape}}
	    {{escaped cc char details} := octal {nullable cc post short octal escape}}
	    {{escaped cc char details} := {leading octal} octal octal {nullable cc}}
	    {{escaped cc char} := escape {escaped cc char details}}
	    {{escaped cc element details} := @CHR:<u> hex hex hex hex {cc range completion}}
	    {{escaped cc element details} := @CHR:<u> hex hex hex {cc range completion post short unicode escape}}
	    {{escaped cc element details} := @CHR:<u> hex hex {cc range completion post short unicode escape}}
	    {{escaped cc element details} := @CHR:<u> hex {cc range completion post short unicode escape}}
	    {{escaped cc element details} := @CHR:<x> hex hex {cc range completion}}
	    {{escaped cc element details} := control {cc range completion}}
	    {{escaped cc element details} := octal octal {cc range completion post short octal escape}}
	    {{escaped cc element details} := octal {cc range completion post short octal escape}}
	    {{escaped cc element details} := {leading octal} octal octal {cc range completion}}
	    {{escaped cc element} := escape {escaped cc element details}}
	    {{escaped string char details} := @CHR:<u> hex hex hex hex {nullable string}}
	    {{escaped string char details} := @CHR:<u> hex hex hex {nullable string post short unicode escape}}
	    {{escaped string char details} := @CHR:<u> hex hex {nullable string post short unicode escape}}
	    {{escaped string char details} := @CHR:<u> hex {nullable string post short unicode escape}}
	    {{escaped string char details} := @CHR:<x> hex hex {nullable string}}
	    {{escaped string char details} := control {nullable string}}
	    {{escaped string char details} := octal octal {nullable string post short octal escape}}
	    {{escaped string char details} := octal {nullable string post short octal escape}}
	    {{escaped string char details} := {leading octal} octal octal {nullable string}}
	    {{escaped string char} := escape {escaped string char details}}
	    {{hash comment body} * {hash comment char}}
	    {{hash comment char} := {@^CLS:<\n-\r\u2028-\u2029>}}
	    {{hash comment} := {terminated hash comment}}
	    {{hash comment} := {unterminated final hash comment}}
	    {{leading octal} := @RAN:<03>}
	    {{non empty string} := {escaped string char}}
	    {{non empty string} := {plain string char} {nullable string}}
	    {{nullable cc post short octal escape} := {cc close}}
	    {{nullable cc post short octal escape} := {escaped cc char}}
	    {{nullable cc post short octal escape} := {plain cc char without octal} {nullable cc}}
	    {{nullable cc post short unicode escape} := {cc close}}
	    {{nullable cc post short unicode escape} := {escaped cc char}}
	    {{nullable cc post short unicode escape} := {plain cc char without hex} {nullable cc}}
	    {{nullable cc} := {cc close}}
	    {{nullable cc} := {cc element and more}}
	    {{nullable string post short octal escape} := {escaped string char}}
	    {{nullable string post short octal escape} := {plain string char without octal} {nullable string}}
	    {{nullable string post short octal escape} := {string close}}
	    {{nullable string post short unicode escape} := {escaped string char}}
	    {{nullable string post short unicode escape} := {plain string char without hex} {nullable string}}
	    {{nullable string post short unicode escape} := {string close}}
	    {{nullable string} := {non empty string}}
	    {{nullable string} := {string close}}
	    {{one or more word characters} + {@CLS:<_[:alnum:]>}}
	    {{op declare bnf} := @STR:<::=>}
	    {{op declare match} := @CHR:<~>}
	    {{op equal priority} := @CHR:<|>}
	    {{op loosen} := @STR:<||>}
	    {{Perl identifier} := {one or more word characters}}
	    {{Perl name} + {Perl identifier} {double colon} 1}
	    {{plain cc char without hex} := {@^CLS:<\7-\r-\134-\135\u2028-\u2029[:xdigit:]>}}
	    {{plain cc char without octal} := {@^CLS:<\7-\r-0-7\134-\135\u2028-\u2029>}}
	    {{plain cc char} := {@^CLS:<\7-\r-\134-\135\u2028-\u2029>}}
	    {{plain cc element without hex} := {plain cc char without hex} {cc range completion}}
	    {{plain cc element without hex} := {posix char class} {nullable cc}}
	    {{plain cc element without octal} := {plain cc char without octal} {cc range completion}}
	    {{plain cc element without octal} := {posix char class} {nullable cc}}
	    {{plain cc element} := {plain cc char} {cc range completion}}
	    {{plain cc element} := {posix char class} {nullable cc}}
	    {{plain string char without hex} := {@^CLS:<\7-\r'\134\u2028-\u2029[:xdigit:]>}}
	    {{plain string char without octal} := {@^CLS:<\7-\r'0-7\134\u2028-\u2029>}}
	    {{plain string char} := {@^CLS:<\7-\r'\134\u2028-\u2029>}}
	    {{posix char class name} + {@NCC:<[:alnum:]>}}
	    {{posix char class} := {@STR:<\133:>} {posix char class name} {@STR:<:\135>}}
	    {{reserved action name} := {double colon} {one or more word characters}}
	    {{reserved event name} := {double colon} {one or more word characters}}
	    {{result item descriptor list} * {result item descriptor} {result item descriptor separator} 0}
	    {{result item descriptor separator} := @CHR:<,>}
	    {{result item descriptor separator} := @CHR:<,> whitespace}
	    {{result item descriptor} := @STR:<g1length>}
	    {{result item descriptor} := @STR:<g1start>}
	    {{result item descriptor} := @STR:<length>}
	    {{result item descriptor} := @STR:<lhs>}
	    {{result item descriptor} := @STR:<name>}
	    {{result item descriptor} := @STR:<rule>}
	    {{result item descriptor} := @STR:<start>}
	    {{result item descriptor} := @STR:<symbol>}
	    {{result item descriptor} := @STR:<value>}
	    {{result item descriptor} := @STR:<values>}
	    {{signed integer} := integer}
	    {{signed integer} := sign integer}
	    {{single quoted name} := {a single quoted string}}
	    {{single quoted string} := {a single quoted string} {character class modifiers}}
	    {{standard name} := @CLS:<A-Za-z> {zero or more word characters}}
	    {{string close} := @CHR:<'>}
	    {{string open} := @CHR:<'>}
	    {{terminated hash comment} := @CHR:<#> {hash comment body} {vertical space char}}
	    {{unterminated final hash comment} := @CHR:<#> {hash comment body}}
	    {{vertical space char} := {@CLS:<\n-\r\u2028-\u2029>}}
	    {{zero or more word characters} * {@CLS:<_[:alnum:]>}}
	}
    }

    method Semantics {} {
	debug.marpa/grammar/<Name>
	# NOTE. This is currently limited to array semantics.
	# NOTE. No support for command semantics in the lexer yet.
	return {start length value}
    }
}

# # ## ### ##### ######## #############
return
