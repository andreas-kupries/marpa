## Copyright 2017 Andreas Kupries
# This file contains a SLIF grammar derived from the original one to
# account for Tcl's idiosyncrasies. And my own.
# - Removed blessings. They are a thoroughly Perl construct which
#   simply does not make sense for Tcl.
# - Encoded the adverb / context relationship into the syntax instead
#   of letting the semantics sort it out.
# - Redefined string and character class syntax to match Tcl with
#   regard to escapes and such. It also encodes the relevant
#   constraints into the syntax instead of letting the semantics
#   break on bad input.
# - Formatting (nice indentations and such)
##
# This file is part of MarpaTcl.  MarpaTcl is free software: you can
# redistribute it and/or modify it under the terms of the BSD 3-Clause
# License (Same license as Tcl itself is under).
#
# MarpaTcl is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
##
# Copyright 2015 Jeffrey Kegler
# This file is part of Marpa::R2.  Marpa::R2 is free software: you can
# redistribute it and/or modify it under the terms of the GNU Lesser
# General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# Marpa::R2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser
# General Public License along with Marpa::R2.  If not, see
# http://www.gnu.org/licenses/.

:default ::=
  action => [start,length,values]

lexeme default =
  action => [start,length,value]
  latm   => 1

:start ::= statements

statements ::= statement+
statement ::=
    <start rule>
  | <empty rule>
  | <null statement>
  | <statement group>
  | <priority rule>
  | <quantified rule>
  | <discard rule>
  | <default rule>
  | <lexeme default statement>
  | <discard default statement>
  | <lexeme rule>
  | <completion event declaration>
  | <nulled event declaration>
  | <prediction event declaration>
  | <current lexer statement>
  | <inaccessible statement>

<null statement> ::= ';'
<statement group> ::= ('{') statements '}'
<start rule> ::= (':start' <op declare bnf>) symbol
<start rule> ::= ('start' 'symbol' 'is') symbol
<default rule> ::= ':default' <op declare bnf> <adverb list default>
<lexeme default statement> ::= ('lexeme' 'default' '=') <adverb list lexeme default>
<discard default statement> ::= ('discard' 'default' '=') <adverb list discard default>

<empty rule> ::= lhs <op declare bnf>   <adverb list bnf empty>
<empty rule> ::= lhs <op declare match> <adverb list match empty>

<quantified rule> ::= lhs <op declare bnf> <single symbol> quantifier <adverb list bnf quantified>
<quantified rule> ::= lhs <op declare match> <single symbol> quantifier <adverb list match quantified>

<discard rule> ::= (':discard' <op declare match>) symbol <adverb list discard>
<discard rule> ::= (':discard' <op declare match>) <character class> <adverb list discard>
# Expanded <single symbol> into its two possibilities to make this
#  more visible to the semantics.

<lexeme rule> ::= (':lexeme' <op declare match>) symbol <adverb list lexeme>
<completion event declaration> ::= ('event') <event initialization> ('=' 'completed') <symbol name>
<nulled event declaration> ::= ('event') <event initialization> ('=' 'nulled') <symbol name>
<prediction event declaration> ::= ('event') <event initialization> ('=' 'predicted') <symbol name>
<current lexer statement> ::= ('current' 'lexer' 'is') <lexer name>

<inaccessible statement> ::= ('inaccessible' 'is') <inaccessible treatment> ('by' 'default')
<inaccessible treatment> ::= 'warn' | 'ok' | 'fatal'

<priority rule> ::= lhs <op declare bnf> <priorities bnf>
<priority rule> ::= lhs <op declare match> <priorities match>

<priorities bnf>   ::= <alternatives bnf>+
  separator => <op loosen>
  proper => 1
<priorities match> ::= <alternatives match>+
  separator => <op loosen>
  proper => 1

<alternatives bnf> ::= <alternative bnf>+
  separator => <op equal priority>
  proper => 1
<alternatives match> ::= <alternative match>+
  separator => <op equal priority>
  proper => 1

<alternative bnf>   ::= rhs <adverb list bnf alternative>
<alternative match> ::= rhs <adverb list match alternative>

<adverb list default>		::= <adverb list items default>
<adverb list discard>		::= <adverb list items discard>
<adverb list lexeme>		::= <adverb list items lexeme>
<adverb list discard default>	::= <adverb list items discard default>
<adverb list lexeme default>	::= <adverb list items lexeme default>
<adverb list bnf alternative>	::= <adverb list items bnf alternative>
<adverb list bnf empty>		::= <adverb list items bnf empty>
<adverb list bnf quantified>	::= <adverb list items bnf quantified>
<adverb list match alternative>	::= <adverb list items match alternative>
<adverb list match empty> 	::= <adverb list items match empty>
<adverb list match quantified>	::= <adverb list items match quantified>

<adverb list items default>		::= <adverb item default>*
<adverb list items discard>	    	::= <adverb item discard>*
<adverb list items lexeme>	    	::= <adverb item lexeme>*
<adverb list items discard default> 	::= <adverb item discard default>*
<adverb list items lexeme default>  	::= <adverb item lexeme default>*
<adverb list items bnf alternative> 	::= <adverb item bnf alternative>*
<adverb list items bnf empty>		::= <adverb item bnf empty>*
<adverb list items bnf quantified>	::= <adverb item bnf quantified>*
<adverb list items match alternative>	::= <adverb item match alternative>*
<adverb list items match empty>		::= <adverb item match empty>*
<adverb list items match quantified>	::= <adverb item match quantified>*

<adverb item default>		::= action            											| <null adverb>
<adverb item discard>	    	::= <event specification>										| <null adverb>
<adverb item lexeme>	    	::= <event specification> | <latm specification> | <priority specification> | <pause specification>	| <null adverb>
<adverb item discard default> 	::= <event specification>										| <null adverb>
<adverb item lexeme default>  	::= action            | <latm specification>								| <null adverb>
<adverb item bnf alternative> 	::= action            | <left association> | <right association> | <group association> | naming		| <null adverb>
<adverb item bnf empty>		::= action            | <left association> | <right association> | <group association> | naming		| <null adverb>
<adverb item bnf quantified>	::= action            | <separator specification> | <proper specification>				| <null adverb>
<adverb item match alternative>	::= naming												| <null adverb>
<adverb item match empty>	::= naming												| <null adverb>
<adverb item match quantified>	::= <separator specification> | <proper specification>							| <null adverb>

# NOTE: __unused__ <rank specification> <null ranking specification>

<null adverb>                ::= ','
action                       ::= ('action'       '=>') <action name>
<left association>           ::= ('assoc'        '=>' 'left')
<right association>          ::= ('assoc'        '=>' 'right')
<group association>          ::= ('assoc'        '=>' 'group')
<separator specification>    ::= ('separator'    '=>') <single symbol>
<proper specification>       ::= ('proper'       '=>') boolean
<rank specification>         ::= ('rank'         '=>') <signed integer>
<priority specification>     ::= ('priority'     '=>') <signed integer>
<pause specification>        ::= ('pause'        '=>') <before or after>
<null ranking specification> ::= ('null-ranking' '=>') <null ranking constant>
<null ranking specification> ::= ('null' 'rank'  '=>') <null ranking constant>
<event specification>        ::= ('event'        '=>') <event initialization>
<latm specification>         ::= ('forgiving'    '=>') boolean
<latm specification>         ::= ('latm'         '=>') boolean
<naming>                     ::= ('name'         '=>') <alternative name>

<null ranking constant>      ::= 'low' | 'high'

<event initialization> ::= <event name> <event initializer>
<event initializer> ::= ('=') <on or off>
<on or off> ::= 'on' | 'off'
<event initializer> ::= # empty

<alternative name> ::= <standard name> | <single quoted name>
<lexer name>       ::= <standard name> | <single quoted name>

<event name> ::=
   <standard name>
 | <single quoted name>
 | <reserved event name>

lhs ::= <symbol name>
rhs ::= <rhs primary>+
<rhs primary> ::= <single symbol>
<rhs primary> ::= <single quoted string>
<rhs primary> ::= <parenthesized rhs primary list>
<parenthesized rhs primary list> ::= ('(') <rhs primary list> (')')
<rhs primary list> ::= <rhs primary>+

<single symbol> ::=
    symbol
  | <character class>

symbol ::= <symbol name>

<symbol name> ::= <bare name> | <bracketed name>
<action name> ::= <Perl name> | <reserved action name> | <array descriptor>

:discard ~ whitespace
whitespace ~ [[:space:]]+

# allow comments
:discard ~ <hash comment>

<hash comment> ~
   <terminated hash comment>
 | <unterminated final hash comment>

<terminated hash comment>         ~ '#' <hash comment body> <vertical space char>
<unterminated final hash comment> ~ '#' <hash comment body>

<hash comment body> ~ <hash comment char>*

<vertical space char> ~  [\n\v\f\r\u2028\u2029]
<hash comment char>   ~ [^\n\v\f\r\u2028\u2029]

<op declare bnf> ~ '::='
<op declare match> ~ '~'
<op loosen> ~ '||'
<op equal priority> ~ '|'
quantifier ::= '*' | '+'
<before or after> ~ 'before' | 'after'

<signed integer> ~ <integer> | <sign> <integer>
<sign> ~ [+-]
<integer> ~ [[:digit:]]+

boolean ~ [01]

<reserved event name>          ~ <double colon> <one or more word characters>
<reserved action name>         ~ <double colon> <one or more word characters>
<one or more word characters>  ~ [[:alnum:]_]+
<zero or more word characters> ~ [[:alnum:]_]*

# Perl identifiers allow an initial digit, which makes them slightly
# more liberal than Perl bare names but equivalent to Perl names with
# sigils.

<Perl identifier> ~ <one or more word characters>
<double colon> ~ '::'
<Perl name> ~ <Perl identifier>+
  separator => <double colon>
  proper    => 1

<bare name>      ~ <one or more word characters>
<standard name>  ~ [a-zA-Z] <zero or more word characters>
<bracketed name> ~ '<' <bracketed name string> '>'
<bracketed name string> ~ [[:alnum:]_[:space:]]+

<array descriptor> ~ <array descriptor left bracket>
                       <result item descriptor list>
		     <array descriptor right bracket>

<array descriptor left bracket> ~ '['
<array descriptor left bracket> ~ '[' whitespace

<array descriptor right bracket> ~ ']'
<array descriptor right bracket> ~ whitespace ']'

<result item descriptor list> ~ <result item descriptor>*
  separator => <result item descriptor separator>

<result item descriptor separator> ~ ','
<result item descriptor separator> ~ ',' whitespace

<result item descriptor> ~
    'start'
  | 'length'
  | 'g1start'
  | 'g1length'
  | 'name'
  | 'lhs'
  | 'symbol'
  | 'rule'
  | 'value'
  | 'values'

quote ~ [']

<single quoted string> ~
  quote
    <string without single quote or vertical space>
  quote
    <character class modifiers>

<single quoted name> ~
  quote
    <string without single quote or vertical space>
  quote

<string without single quote or vertical space> ~ <string character>+
<string character> ~ escaped | [^'\n\v\f\r\u2028\u2029]
# Not quite <horizontal character>, as quote is excluded as well.

<character class> ~
  <cc open>
    <cc elements>
  <cc closing>
    <character class modifiers>

<cc open>    ~ '['  # Regular class
<cc open>    ~ '[^' # Inverted class
<cc closing> ~ ']'

<cc elements> ~ <cc element>+

<cc element>  ~ <cc range>
<cc element>  ~ <cc character>

<cc range> ~ <cc single character> '-' <cc single character>

<cc character> ~ <cc single character>
<cc character> ~ <posix char class>

<cc single character> ~ escaped | normal

normal ~ [^\f\n\r\t\v\u2028\u2029\\\135]
# U+2028 :: Line Separator
# U+2029 :: Paragraph Separator
# U+005D :: ']' (ASCII 93, \135)
# Not quite <horizontal character>, as backslash and ] are excluded too.
# Ensuring that these can only be added in some escaped form. As done here.

# Tcl backslash escaped characters [man Tcl(1), man subst(n)]
# \a, \b, \f, \n, \r, \t, \v, \\
# \ooo (1-3)
# \x(h*)hh
# \uhhhh (1-4)

escaped ~ special | octal | unicode | unihex

special ~ '\\' [abfnrtv\\]

odigit  ~ [0-7]
lodigit ~ [0-3]

octal ~ '\\' odigit
octal ~ '\\' odigit odigit
octal ~ '\\' lodigit odigit odigit

hex ~ [[:xdigit:]]
unicode ~ '\\u' hex
unicode ~ '\\u' hex hex
unicode ~ '\\u' hex hex hex
unicode ~ '\\u' hex hex hex hex

unihex ~ '\\x' hex hex
# Tcl allows an arbitrary number of hex digits, ignoring all but the
# last two. We restrict SLIF to the two hex digits which actually
# matter.

<posix char class>      ~ '[:' <posix char class name> ':]'
<posix char class name> ~ [[:alnum:]]+

# A horizontal character is any character that is not a form of vertical space
# <horizontal character> ~ [^\n\v\f\r\u2028\u2029]
# U+2028 :: Line Separator
# U+2029 :: Paragraph Separator

<character class modifiers> ~ <character class modifier>*
<character class modifier> ~ ':ic'
<character class modifier> ~ ':i'
