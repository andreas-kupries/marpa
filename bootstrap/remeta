#!/usr/bin/env tclsh
# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
##
# (c) 2017-present Andreas Kupries http://wiki.tcl.tk/andreas%20kupries
#                                  http://core.tcl.tk/akupries/
#
# # ## ### ##### ######## ############# #####################
## Regenerate the SLIF boot parser
## Regenerate the LITERAL parser
## Regenerate the example language parsers
## - json
## - heredoc
## - min-dt

package require Tcl 8.5
package require marpa::slif::parser
package require marpa::slif::container
package require marpa::slif::semantics
package require marpa::gen
package require marpa::gen::format::cparse-critcl
package require marpa::gen::format::tparse
package require fileutil

#debug on util/benchmarking

if {[llength $argv] > 1} {
    puts "Usage: $argv0 ?/path/to/main/destination/directory?"
    puts "Results are written to:"
    puts " - DST/slif-parser/parser.tcl"
    puts " - DST/slif-literal/lparser.tcl"
    puts " - DST/languages/*/*-{c,tcl}.tcl"
    puts ""
    exit 1
}

# Default: Current working directory.
if {![llength $argv]} { lappend argv [pwd] }

set a  {Andreas Kupries}
set ja {Jeffrey Kegler + Andreas Kupries}

set selfdir  [file dirname [file normalize [info script]]]
set topdir   [file dirname $selfdir]
set meta     [file join $selfdir marpa-tcl-slif slif]
set literals [file join $selfdir marpa-tcl-slif literals]

set lang     [file join $topdir languages]
set json     [file join $lang json    g json.slif]
set heredoc  [file join $lang heredoc g heredoc.slif]
set mindt    [file join $lang min-dt  g min-dt.slif]
set mindtsf  [file join $lang min-dt  g sf.slif]

set dst      [lindex $argv 0]

proc F {n} { format "%.2f" $n }

proc Make {authors name src dst {format cparse-critcl}} {
    file mkdir [file dirname $dst]

    # _ __ ___ _____ ________ _____________ _____________________
    # Process the grammar
    set sz [file size $src]
    puts "Processing $src ($sz bytes) ..."
    marpa::slif::container create GC
    marpa::slif::semantics create SEMA GC
    marpa::slif::parser    create BOOT

    set start  [clock milliseconds]
    set ast [BOOT process-file $src]
    set done   [clock milliseconds]
    set millis [expr {$done-$start}]
    set sec    [expr {double($millis)/1000}]
    set speed  [expr {$sz/$sec}]
    puts "Processing done in [F $sec] seconds (@ [F $speed] bytes/sec)"

    SEMA process $ast
    # GC now holds the grammar
    BOOT destroy
    # Note: SEMA auto-destroys itself at the end of 'process'.

    # _ __ ___ _____ ________ _____________ _____________________
    # Generate the SLIF parser class
    puts "Generating ..."
    marpa::gen config! version  0
    marpa::gen config! writer   $authors
    marpa::gen config! year     [clock format [clock seconds] -format %Y]
    marpa::gen config! name     $name
    marpa::gen config! operator $::tcl_platform(user)@[info hostname]
    marpa::gen config! tool     [file tail [info script]]
    set parser [marpa::gen::format::$format container GC]
    GC destroy

    # _ __ ___ _____ ________ _____________ _____________________
    # Write to file for debugging.
    puts "Saving to $dst ..."
    fileutil::writeFile $dst $parser

    puts {... OK}
    return
}

# _ __ ___ _____ ________ _____________ _____________________
# Process the slif grammars (meta & literal)

Make $ja marpa::slif::parser          $meta     $dst/slif-parser/parser.tcl
Make $a  marpa::slif::literal::parser $literals $dst/slif-literal/lparser.tcl

# _ __ ___ _____ ________ _____________ _____________________
# Process the example json grammar

Make $a json::parser::c   $json $dst/languages/json/json-c.tcl
Make $a json::parser::tcl $json $dst/languages/json/json-tcl.tcl tparse

# _ __ ___ _____ ________ _____________ _____________________
# Process the example heredoc grammar

Make $a heredoc::parser::c   $heredoc $dst/languages/heredoc/heredoc-c.tcl
Make $a heredoc::parser::tcl $heredoc $dst/languages/heredoc/heredoc-tcl.tcl tparse

# _ __ ___ _____ ________ _____________ _____________________
# Process the example min-dt grammars

Make $a mindt::parser::c   $mindt $dst/languages/min-dt/mindt-lang-c.tcl
Make $a mindt::parser::tcl $mindt $dst/languages/min-dt/mindt-lang-tcl.tcl tparse

Make $a mindt::parser::sf::c   $mindtsf $dst/languages/min-dt/mindt-sf-c.tcl
Make $a mindt::parser::sf::tcl $mindtsf $dst/languages/min-dt/mindt-sf-tcl.tcl tparse

exit
