# -*- tcl -*-
##
# (c) 2015-2017 Andreas Kupries http://wiki.tcl.tk/andreas%20kupries
#                               http://core.tcl.tk/akupries/
##
# This code is BSD-licensed.

# SLIF support. Container for the grammar information generated by the
# semantics from a SLIF definition

# # ## ### ##### ######## #############
## Requisites

package require Tcl 8.5
package require TclOO         ;# Implies Tcl 8.5 requirement.
package require debug
package require debug::caller
package require oo::util      ;# mymethod

debug define marpa/slif/container
#debug prefix marpa/slif/container {[debug caller] | }

# # ## ### ##### ######## #############
## 

oo::class create marpa::slif::container {
    superclass marpa::slif::container::serdes

    marpa::E marpa/slif/container SLIF CONTAINER

    constructor {} {
	debug.marpa/slif/container {}

	# Attributes, global and lexeme semantics
	marpa::slif::container::attribute::global create GA [self]
	marpa::slif::container::attribute::lexsem create LS

	# Grammars for the two levels.
	marpa::slif::container::grammar::g1 create G1
	marpa::slif::container::grammar::l0 create L0

	# TODO? semstore, used as a string pool
	debug.marpa/slif/container {/ok}
	return
    }

    # # -- --- ----- -------- -------------
    ## Toplevel API invoked by the semantics.
    ## Delegated to internl objects for actual handling.

    forward g1               G1
    forward l0               L0
    forward inaccessible     GA set inaccessible
    forward start!           GA set start
    forward lexeme-semantics LS set

    # # -- --- ----- -------- -------------
    ## Further public API - Introspection, (de)serialization, ...

    method serialize {} {
	debug.marpa/slif/container {}
	# Recursively generate a nested dict describing the container
	# contents. Empty parts are not placed into the result.

	foreach {label part} {
	    global GA
	    lexeme LS
	    g1     G1
	    l0     L0
	} {
	    set child [$part serialize]
	    if {![llength $child]} continue
	    dict set s $label $child
	}
	return $s
    }

    method deserialize {blob} {
	debug.marpa/slif/container {}
	error ;# TODO: ser(deser(ser())) == ser()
	# clear all parts first
	# ignore missing parts.
	return
    }

    # TODO: Validation.

    # # -- --- ----- -------- -------------
    ## Internal methods

    # # ## ### ##### ######## #############
}

# # ## ### ##### ######## #############
return
