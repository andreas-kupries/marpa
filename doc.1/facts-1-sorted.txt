
ID	GROUP		ENTITY		DETAILS		NOTES

.	:default			     		G1
.	:discard					L0

.	G1				have semantics (actions)
.	G1		      		structural level (parsing, ast building)
.	G1		(...)		Hide element from the semantics - Flag vector per alternative

.	G1		:default	Defaults for rule adverbs
.	G1		:default	Multiple allowed
.	G1		:default	Ordering important, lexical, applies only to rules later in input
.	G1		:default	RHS empty
.	G1		:default	RHS empty
.	G1		:default	Unspecified adverbs reset to implicit default (before any explicit settings)
.	G1		:default	adverb: action
.	G1		:default	adverb: action
.	G1		:default	adverb: action	Override implicit default
.	G1		:default	adverb: action	X-CHECK
.	G1		:default	adverb: bless

.	G1		:start
.	G1		:start		Declares start symbol

.	G1		BNF		Empty rule:    Adverbs restrict: bless, action; no other
.	G1		BNF		LHS on RHS     => operand
.	G1		BNF		RHS, any number (including none)
.	G1		BNF		adverb:	action
.	G1		BNF		adverb: action	Override defaults
.	G1		BNF		adverb: action	X-CHECK
.	G1		BNF		adverb: name	X-CHECK
.	G1		BNF		adverb: null-ranking
.	G1		BNF		adverb: rank	X-CHECK
.	G1		BNF		arity 0	nullary		Ignore precedence, assoc
.	G1		BNF		arity 1 unary		Use prec, ignore left|right assoc
.	G1		BNF		arity 2 binary		Use prec, left|right traditional, See n-ary
.	G1		BNF		arity >2 n-ary		Use prec, group - all associate at lowest level
.	G1		BNF		arity >2 n-ary		Use prec, left - leftmost operand associates, other next-tight
.	G1		BNF		arity >2 n-ary		Use prec, right - rightmost operand associates, other next-tight
.	G1		BNF		non-LHS on RHS => operator

.	G1		BNF nullable	1 Same action for all alternatives - Use that
.	G1		BNF nullable	2 Different actions - One alternative is empty - Use that
.	G1		BNF nullable	3 Otherwise: Exception - Thrown when ?

.	G1		RHS charclass	implicit L0 symbol
.	G1		RHS string	implicit L0 symbol

.	G1		charclass	generates internal L0 symbol and rule. Name is auto-assigned.
.	G1		event		global	    /DSL

.	G1		parse events	non-lexemes

.	G1		prioritized	adverb: assoc	X-CHECK
.	G1		prioritized	separate rules start at the same priority
.	G1		prioritized	tightest (highest) to loosest (lowest) (first to last, ||)

.	G1		quantified	adverb: action
.	G1		quantified	adverb: bless
.	G1		quantified	adverb: proper
.	G1		quantified	adverb: proper		X-CHECK
.	G1		quantified	adverb: separator
.	G1		quantified	adverb: separator	X-CHECK

.	G1		quoted string	generates internal L0 symbol and rule. Name is auto-assigned.

.	G1		start symbol	:start
.	G1		start symbol	LHS of 1st G1 rule
.	G1		start symbol	LHS of first G1 rule

.	G1		terminals	== L0 lexemes		Fatal if not
.	G1		terminals	Leaf symbols (no LHS)

.	G1    		event		decl: parse event, non-lex event
.	G1    		event		nulled		named event

.	G1 rule				::=	Effect may depend on order

.	L0				No semantic actions
.	L0				lexical level (tokenization)
.	L0				semantics are not by action
.	L0		    		(a) multiple acceptable tokens of same maximal length
.	L0		    		(b) => provide all

.	L0		:discard	Multiple uses allowed
.	L0		:discard	RHS 1 symbol
.	L0		:discard	RHS must be toplevel symbol
.	L0		:discard	RHS: Do not pass this symbol to G1
.	L0		:discard	adverb: event (ONLY)	/discard event/

.	L0		:lexeme		Explicit declaration of a lexeme symbol, adverbs for it
.	L0		:lexeme		Fatal error if symbol is not actually a lexeme
.	L0		:lexeme		adverb: event
.	L0		:lexeme		adverb: event	X-CHECK
.	L0		:lexeme		adverb: latm	X-CHECK
.	L0		:lexeme		adverb: pause
.	L0		:lexeme		adverb: pause	X-CHECK
.	L0		:lexeme		adverb: priority
.	L0		:lexeme		adverb: priority	X-CHECK

.	L0		BNF		LHS on RHS     => operand
.	L0		BNF		adverb: name	X-CHECK
.	L0		BNF		adverb: rank	X-CHECK
.	L0		BNF		arity 0	nullary		Ignore precedence, assoc
.	L0		BNF		arity 1 unary		Use prec, ignore left|right assoc
.	L0		BNF		arity 2 binary		Use prec, left|right traditional, See n-ary
.	L0		BNF		arity >2 n-ary		Use prec, group - all associate at lowest level
.	L0		BNF		arity >2 n-ary		Use prec, left - leftmost operand associates, other next-tight
.	L0		BNF		arity >2 n-ary		Use prec, right - rightmost operand associates, other next-tight
.	L0		BNF		non-LHS on RHS => operator

.	L0		charclass	:i, :ic modifer => case-insensitive matching

.	L0		discard default	DSL.pod  mismatch 'discard default' / 'lexeme default'
.	L0		discard default	adverb: event
.	L0		discard default	allowed once only
.	L0		discard default	global

.	L0		event pseudo	:symbol		0 Name is RHS of the discard rule (symbol or class)
.	L0		event pseudo	:symbol		1 Symbol: Name of symbol
.	L0		event pseudo	:symbol		2 Class: String specifying the class
.	L0		event pseudo	:symbol		3 Class: Equivalent class with different literals
.	L0		event pseudo	:symbol		4 Class: have different names
.	L0		event pseudo	:symbol		Only	:discard, discard default

.	L0		events		activation default: on

.	L0		lexeme		== G1 terminals		Fatal if not
.	L0		lexeme		Toplevel symbols (not on RHS), not discarded

.	L0		lexeme default	RHS empty
.	L0		lexeme default	adverb:	latm
.	L0		lexeme default	adverb: action
.	L0		lexeme default	adverb: action	Override.	Forbidden: <user command>
.	L0		lexeme default	adverb: action	X-CHECK
.	L0		lexeme default	adverb: bless
.	L0		lexeme default	adverb: latm
.	L0		lexeme default	adverb: latm	X-CHECK
.	L0		lexeme default	allowed once only
.	L0		lexeme default	global

.	L0		parse events	premature stop to parsing ...

.	L0		quantified	RHS 1 charclass
.	L0		quantified	RHS 1 symbol
.	L0		quantified	adverb: proper		X-CHECK
.	L0		quantified	adverb: separator	X-CHECK

.	L0		quoted string	:i, :ic modifer => case-insensitive matching

.	L0		rules		adverb: action	forbidden

.	L0    		:discard	adverb: event,	discard event

.	L0		:lexeme		decl: lexeme event
.	L0    		:lexeme		adverb: pause	post-lexeme event
.	L0    		:lexeme		adverb: pause	pre-lexeme event

.	L0    		parse events	lexeme

.	L0 rule				~	Effect may depend on order

.	SLIF		pseudo-rule
.	SLIF		rule
.	SLIF		statement

.	SV		::array		See [values]

.	SV		::first
.	SV		::first		Lexeme - Fatal error
.	SV		::first		RHS blessed - Fatal error
.	SV		::first		Value of 1st child, or 'undef'
.	SV		::first		value of the 1st RHS child

.	SV		::undef		RHS blessed - Fatal error
.	SV		::undef		Value is undef, always

.	SV		<user command>
.	SV		<user command>	L0: Forbidden
.	SV		<user command>	SV		command result
.	SV		<user command>	arg[1 ]		scratchpad object
.	SV		<user command>	arg[2+]		SV of RHS symbols

.	SV		L0		Default: matched string

.	SV		any action	L0:	 1 Applies to the lexeme = toplevel LHS = G1 terminal
.	SV		any action	L0:	 2 Does not apply to the non-lexeme LHS ...
.	SV		any action	L0:	 3 Some might have to be computed to get the lexeme level
.	SV		any action	L0:	 4 values (char location, char length). Computing others
.	SV		any action	L0:	 5 and ignoring the intermediates might make things easier,
.	SV		any action	L0:	 5 i.e. no special casing for the top.

.	SV		array[]		G1: g1length	length of instance in G1 locations
.	SV		array[]		G1: g1start	start location of instance
.	SV		array[]		G1: length	length of instance in characters ? - Need internal SV vs user SV !?
.	SV		array[]		G1: lhs		LHS/lexeme symbol _id_ of the rule (See 'symbol' for name)
.	SV		array[]		G1: name	1 Name of the rule, adverb: name
.	SV		array[]		G1: name	2 Name of the rule, name of the LHS symbol
.	SV		array[]		G1: rule	Rule _id_
.	SV		array[]		G1: start	start of instance in char location ? - Need internal SV vs user SV !?
.	SV		array[]		G1: symbol	LHS symbol name of the rule (See 'lhs' for id)
.	SV		array[]		G1: value	Same as 'values'
.	SV		array[]		G1: values	list of the RHS children value
.	SV		array[]		L0: g1length	Forbidden
.	SV		array[]		L0: g1start	Forbidden
.	SV		array[]		L0: length	length of instance in characters
.	SV		array[]		L0: lhs		Forbidden?
.	SV		array[]		L0: name	Forbidden?
.	SV		array[]		L0: rule	Forbidden?
.	SV		array[]		L0: start	start of instance in char location
.	SV		array[]		L0: symbol	Forbidden?
.	SV		array[]		L0: value	Same as 'values'
.	SV		array[]		L0: values	(lexeme) literal string of the lexeme

.	SV		array[]		[name]		string [name of the rule] fixed?
.	SV		array[]		[value]		L0 DEFAULT
.	SV		array[]		[value]		L0 string, literal value of token in input
.	SV		array[]		[values]	G1 list [RHS children SV] dynamic

.	SV		array[]		note-0		select a set of predef
.	SV		array[]		note-1		semantics by name. basic
.	SV		array[]		note-2		value is a dict. chosen
.	SV		array[]		note-3		name specify data to place
.	SV		array[]		value	L0 default

.	SV		instance	AST nodes maps to instances.
.	SV		instance	G1: rule alternative
.	SV		instance	L0: lexeme = G1 terminal
.	SV		instance	end location   s.a.
.	SV		instance	start location L0: char location, G1: earley item ?

.	SV		node		AST element
.	SV		node		Has 'instance'	X-CHECK
.	SV		node		Has 'value'
.	SV		node		child = RHS of the rule, current is LHS
.	SV		node		lexeme: no children -- terminal symbol
.	SV		node		parent = LHS of the rule, current node is RHS
.	SV		node		quantified: children are list of the RHS symbol
.	SV		node		refers	'instance'

.	SV		undef		value	G1 default

.	SV		value		G1: Computed by action - Associated to node's instance - rule.
.	SV		value		L0: Limited action (array[]) - Associated to node's instance - rule
.	SV		value		One per node
.	SV		value		lexeme default action: [value]
.	SV		value		rule default action: undef

.	adverbs				Associated with rule alternatives, not rule in toto
.	adverbs		!action,!bless	user: G1 empty rule FORBIDDEN

.	adverbs		action		::first
.	adverbs		action		<user command>
.	adverbs		action		G1 rules: Allowed, only place
.	adverbs		action		L0 rules: Forbidden
.	adverbs		action		[...] 'SV array[]'
.	adverbs		action		user:	    :default	X-CHECK
.	adverbs		action		user: :default
.	adverbs		action		user: G1 BNF
.	adverbs		action		user: G1 BNF		X-CHECK
.	adverbs		action		user: G1 empty rule ok
.	adverbs		action		user: G1 quantified	X-CHECK
.	adverbs		action		user: lexeme default
.	adverbs		action 		L0 rules forbidden
.	adverbs		action 		user: lexeme default	X-CHECK
.	adverbs 	action		user: :default	X-CHECK

.	adverbs		assoc		user: G1 GNF prioritized

.	adverbs		bless		1 Specify package where to search for the action commands.
.	adverbs		bless		2 Maybe treat as a command prefix for Tcl ? (object instance command ...)
.	adverbs		bless		::lhs	 Best for :default
.	adverbs		bless		::lhs	 Search class based on LHS symbol name (whitespace to underscore)
.	adverbs		bless		::lhs	 Symbol name restricted to alphanumerics and whitespace. Fatal if not.
.	adverbs		bless		::lhs	 Symbol name whitespace to underscore
.	adverbs		bless		::name	 Best for lexeme default
.	adverbs		bless		::name	 G1 BNF - Forbidden
.	adverbs		bless		::name	 Search based on name of lexeme. G1 BNF forbidden ?
.	adverbs		bless		::name	 Symbol name restricted to alphanumerics and whitespace. Fatal if not.
.	adverbs		bless		::name	 Symbol name whitespace to underscore
.	adverbs		bless		::undef	 Search global ?
.	adverbs		bless		Implicit default:  ::undef
.	adverbs		bless		user:	    :default	X-CHECK
.	adverbs		bless		user: G1 empty rule ok
.	adverbs		bless		user: G1 quantified	X-CHECK
.	adverbs		bless		user: None listed
.	adverbs		bless		user: lexeme default	X-CHECK

.	adverbs		event		FATAL if 'pause' is not specified as well
.	adverbs		event		user: :lexeme		X-CHECK
.	adverbs		event		user: :lexeme, only
.	adverbs		event		user: discard
.	adverbs		event		user: discard default	X-CHECK
.	adverbs		event		user: discard,	discard event

.	adverbs		forgiving	Synonym: latm

.	adverbs		latm		?able to change at runtime?
.	adverbs		latm		?global, or per token?
.	adverbs		latm		Set per lexeme.
.	adverbs		latm		default false	(historical reason, true is better)
.	adverbs		latm		off = longest token matching (most systems, standard)
.	adverbs		latm		off for a lexeme - lexer does no checks
.	adverbs		latm		on  = longest _acceptable_ token matching
.	adverbs		latm		on  for a lexeme - lexer checks for acceptability (0-length guard symbol)
.	adverbs		latm		type	bool
.	adverbs		latm		user: :lexeme
.	adverbs		latm		user: No other user
.	adverbs		latm		user: lexeme default
.	adverbs		latm		user: lexeme default	X-CHECK	!per lexeme
.	adverbs		latm   		user: lexeme default	X-CHECK

.	adverbs		name		Explicitly name the alternative in question.
.	adverbs		name		user: G1 BNF
.	adverbs		name		user: L0 BNF

.	adverbs		null-ranking	G1 only
.	adverbs		null-ranking	L0 forbidden (no semantic actions)
.	adverbs		null-ranking	user: G1 BNF

.	adverbs		pause		No adverb 'event' --> event is unnamed
.	adverbs		pause		user: :lexeme		X-CHECK
.	adverbs		pause		user: :lexeme, only

.	adverbs		priority	default priority 0
.	adverbs		priority	higher numeric <=> higher priority
.	adverbs		priority	integer, can be < 0, higher numeric <=> higher priority
.	adverbs		priority	user: :lexeme		X-CHECK
.	adverbs		priority	user: :lexeme, only

.	adverbs		proper		Boolean
.	adverbs		proper		Ignored for !separator
.	adverbs		proper		user: G1 quantified
.	adverbs		proper		user: G1 quantified	X-CHECK
.	adverbs		proper		user: L0 quantified

.	adverbs		rank		user: G1 BNF
.	adverbs		rank		user: L0 BNF

.	adverbs		separator	user: G1 quantified
.	adverbs		separator	user: G1 quantified	X-CHECK
.	adverbs		separator	user: L0 quantified

.	bracket symbol	whitespace	normalized: 1. squash all sequences to single space (0x32)
.	bracket symbol	whitespace	normalized: 2. leading removed
.	bracket symbol	whitespace	normalized: 3. trailing removed

.	global				=	Order is not relevant!
.	global		discard default
.	global		lexeme default

.	lexeme default			      	     	L0

.	parse events
.	parse events	lexeme event	L0
.	parse events	lexeme event	L0 :lexeme

.	parse events	lexeme event	post-lexeme	AKA 'after'
.	parse events	lexeme event	post-lexeme	Triggers when lexeme is already read	
.	parse events	lexeme event	post-lexeme	Triggers when lexeme would be accepted by G1
.	parse events	lexeme event	post-lexeme	Triggers when no pre-lexeme event triggered at the location
.	parse events	lexeme event	post-lexeme	Triggers when of higher or equal priority than other lexemes which could trigger
.	parse events	lexeme event	post-lexeme	current location = end of the lexeme
.	parse events	lexeme event	post-lexeme	descriptor:	 name of event
.	parse events	lexeme event	post-lexeme	event location = current
.	parse events	lexeme event	post-lexeme	knows	pause lexeme - lexeme symbol
.	parse events	lexeme event	post-lexeme	knows	pause span   - start/length 
.	parse events	lexeme event	post-lexeme	trigger location = current
.	parse events	lexeme event	post-lexeme	via :lexeme, adverb: pause

.	parse events	lexeme event	pre-lexeme	1 Triggers at beginning of lexeme.
.	parse events	lexeme event	pre-lexeme	2 Actually: Triggers at end and 'rewinds'
.	parse events	lexeme event	pre-lexeme	3 !! Lexeme is not predicted, but recognized already
.	parse events	lexeme event	pre-lexeme	4 Triggers when lexeme would be accepted by G1
.	parse events	lexeme event	pre-lexeme	AKA 'before'
.	parse events	lexeme event	pre-lexeme	current location = end of the lexeme
.	parse events	lexeme event	pre-lexeme	descriptor:	 name of event
.	parse events	lexeme event	pre-lexeme	event location = current
.	parse events	lexeme event	pre-lexeme	knows	pause lexeme - lexeme symbol
.	parse events	lexeme event	pre-lexeme	knows	pause span   - start/length
.	parse events	lexeme event	pre-lexeme	trigger location = start of lexeme
.	parse events	lexeme event	pre-lexeme	via :lexeme, adverb: pause

.	parse events	non-lex	event	exhaustion	IGNORED, later
.	parse events	non-lex event	G1
.	parse events	non-lex event	G1 event, named event

.	parse events	non-lex event	completed	Symbol found, and completed here
.	parse events	non-lex event	completed	current location = instance end location
.	parse events	non-lex event	completed	descriptor:	 name of event
.	parse events	non-lex event	completed	event location = current
.	parse events	non-lex event	completed	trigger location = current

.	parse events	non-lex event	discard		1 impl. note: completion event on
.	parse events	non-lex event	discard		2 impl. note: non-lexeme toplevel
.	parse events	non-lex event	discard		3 impl. note: LHS for L0 grammar
.	parse events	non-lex event	discard		:discard, adverb: event
.	parse events	non-lex event	discard		current location = instance end location (end of discarded text)
.	parse events	non-lex event	discard		descriptor:	 end location
.	parse events	non-lex event	discard		descriptor:	 g1 location of last _lexeme_
.	parse events	non-lex event	discard		descriptor:	 name of event
.	parse events	non-lex event	discard		descriptor:	 start location
.	parse events	non-lex event	discard		event location = current
.	parse events	non-lex event	discard		trigger location = current

.	parse events	non-lex event	nulled		G1 event
.	parse events	non-lex event	nulled		Nulled symbol completed/recognized
.	parse events	non-lex event	nulled		current location = instance start/end location
.	parse events	non-lex event	nulled		descriptor:	 name of event
.	parse events	non-lex event	nulled		event location = current
.	parse events	non-lex event	nulled		trigger location = current

.	parse events	non-lex event	predicted	Symbol may start here
.	parse events	non-lex event	predicted	any symbol, even lexeme -- Even sub-lexeme L0 symbols ?	
.	parse events	non-lex event	predicted	descriptor:	 name of event
.	parse events	non-lex event	predicted	event location = current
.	parse events	non-lex event	predicted	trigger location = current

.	parse events	non-lex event	rejection	IGNORED, later

.	parse events	order		1 lexeme	arbitrary within the type
.	parse events	order		2 completed	arbitrary within the type
.	parse events	order		3 nulling	arbitrary within the type
.	parse events	order		4 predicted	arbitrary within the type

.	statement	G1 rule
.	statement	L0 rule
.	statement	global
