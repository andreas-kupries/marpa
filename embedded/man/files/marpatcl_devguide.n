'\"
'\" Generated from file 'marpatcl_devguide\&.man' by tcllib/doctools with format 'nroff'
'\" Copyright (c) 2015-present Andreas Kupries
'\" Copyright (c) 2018-present Documentation, Andreas Kupries
'\"
.TH "marpatcl_devguide" n 1 doc "Marpa/Tcl, a binding to libmarpa"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
marpatcl_devguide \- Marpa/Tcl - The Developer's Guide
.SH DESCRIPTION
.PP
Welcome to Marpa/Tcl, a Tcl binding to the "\fIlibmarpa\fR" parsing
engine\&.
.PP
Please read the document \fIMarpa/Tcl - Introduction to Marpa/Tcl\fR, if you have not done
so already\&. It provides an overview of the whole system\&.
.SH AUDIENCE
This document is a guide targeted at all developers working on the
internals of Marpa/Tcl, i\&.e\&. maintainers fixing bugs, developers
adding functionality, etc\&.
.PP
Please read
.IP [1]
\fIMarpa/Tcl - How To Get The Sources\fR and
.IP [2]
\fIMarpa/Tcl - The Installer's Guide\fR
.PP
first, if that was not done already\&.
Here we assume that the sources are already available in a directory
of the reader's choice, and that the reader not only knows how to
build and install them, but also has all the necessary requisites to
actually do so\&. The guide to the sources in particular also explains
which source code management system is used, where to find it, how to
set it up, etc\&.
.SH "DEVELOPING FOR MARPA/TCL"
.SS "SYSTEM ARCHITECTURE"
The system can be split into roughly six sections, as seen in the
figure below\&. The seventh, highlighted in green, is \fBlibmarpa\fR
itself, which is technically outside of the system\&.
.PP
.PS
.nf
+-------------------------------------------------------------------------+
| Applications:              marpa-gen                                    |
+-------------------------------------------------------------------------+
+---------------------------+ +-------------------------------------------+
| SLIF: semantics container | | Generators: gc(c,tcl,compact) tparse/tlex |
|       parser    literals  | |             slif              cparse/clex |
|                 precedence| |                                           |
|                 utils     | |                                           |
+---------------------------+ +-------------------------------------------+
+---------------------------+ +-------------------------------------------+
| rt-C:                     | | rt-Tcl: runtime::tcl                      |
|       runtime::c          | |         marpa::c                          |
+---------------------------+ +-------------------------------------------+
+---------------------------+ +-------------------------------------------+
|     (( libmarpa ))        | | unicode data & utils: unicode             |
|                           | |                       util                |
+---------------------------+ +-------------------------------------------+

.fi
.PE
.PP
In more detail:
.TP
Applications
At the top we have the \fBmarpa-gen\fR application\&. It integrates and
uses all of the packages to provide a parser generator reading
grammars specified using SLIF and producing results in a variety of
formats\&.
.TP
SLIF
The packages supporting the SLIF language for grammar specifications\&.
This is a very close sibling to the SLIF language used by
\fIMarpa::R2\fR [https://jeffreykegler\&.github\&.io/Marpa-web-site/], the current stable version of the Perl binding\&.
.sp
It can be further divided into groups for parsing SLIF, the
semantics for translating a parse into a container, a container for
SLIF grammars, and the processing of literals (strings and character
classes)\&.
.TP
Generators
The packages for producing a variety of formats from a SLIF grammar
container\&. Further divided into serialization of containers as Tcl
code, parsers and lexers based on the Tcl and C runtimes, and
reconstruction of SLIF from a container\&.
.TP
rt-Tcl
The package \fBmarpa::runtime::tcl\fR\&. It implements a parse
engine in Tcl\&. This uses \fBmarpa::c\fR, which is a thin wrapper
around \fBlibmarpa\fR\&.
.TP
rt-C
The package \fBmarpa::runtime::c\fR\&. It implements a parse engine
in C, directly on top of \fBlibmarpa\fR, without wrappers\&.
.TP
Unicode data and utilities
The \fBmarpa::unicode\fR package\&. It provides access to named
character classes, case folding, de- and encoding codepoints to
various representations, character class operations, etc\&.
.TP
libmarpa
Jeffrey Kegler's base library implementing an Earley parser which has
the fixes by John Aycock, Nigel Horspool and Joop Leo\&. This is the
foundation for the rest of the system\&.
.PP
The package dependencies are a bit large, and will be shown
per-section, in the documentation of each section\&.
.IP [1]
\fIMarpa/Tcl - Application\fR\&.
.IP [2]
\fIMarpa/Tcl - SLIF\fR\&.
.IP [3]
\fIMarpa/Tcl - Generation\fR\&.
.IP [4]
\fIMarpa/Tcl - Runtime/Tcl\fR\&.
.IP [5]
\fIMarpa/Tcl - Runtime/C\fR\&.
.IP [6]
\fIMarpa/Tcl - Unicode Data & Utilities\fR\&.
.PP
.SS "DIRECTORY STRUCTURE"
.TP
Helpers
.RS
.TP
"\fItools/\fR"
This directory contains helper scripts\&.
.TP
"\fItools/utf-viewer\&.tcl\fR"
This helper reads a file containing UTF-8 encoded unicode text
and prints the contents in decoded form, especially showing
the construction of multi-byte characters\&.
.TP
"\fItools/unidata\&.tcl\fR"
This helper reads the unicode tables stored in directory
"\fIunidata/\fR" and generates a mix of Tcl and C data
structures for use within Marpa/Tcl\&.
The integration point is package \fBmarpa::unicode\fR
(directory "\fIunicode/\fR")\&.
.TP
"\fIgenerated/\fR"
The directory where "\fItools/unidata\&.tcl\fR" places the
generated files\&.
.TP
"\fIunidata/\fR"
The directory where "\fItools/unidata\&.tcl\fR" reads the unicode
tables from\&.
.TP
"\fIbootstrap/\fR"
This directory contains the specifications for SLIF and
literal grammars, and the helpers needed to regenerate their
parsers\&.
.TP
"\fIbootstrap/marpa-tcl-slif/slif\fR"
SLIF specification of the SLIF grammar\&.
.TP
"\fIbootstrap/marpa-tcl-slif/literal\fR"
SLIF specification of the Literal grammar\&.
.TP
"\fIbootstrap/remeta\fR"
.TP
"\fIbootstrap/remeta-tcl\fR"
These helper applications regenerate the SLIF and literal
parsers from their grammars\&.  The first variant generates
C-based parsers, the other Tcl-based parsers\&.
.RE
.TP
Documentation
.RS
.TP
"\fIdoc/\fR"
This directory contains the documentation sources\&. The texts
are written in \fIdoctools\fR format, whereas the figures are
written in tklib's \fBdia\fR(gram) package and
application\&.
.TP
"\fIembedded/\fR"
This directory contains the documentation converted to regular
manpages (nroff) and HTML\&.
.sp
It is called \fIembedded\fR because these files, while derived, are
part of the fossil repository, i\&.e\&. embedded into it\&. This
enables fossil to access and display these files when serving
the repositories' web interface\&.  The "Command Reference" link
at
\fIhttps://core\&.tcl-lang\&.org/akupries/marpa\fR
is, for example, accessing the generated HTML\&.
.RE
.TP
Examples
.RS
.TP
"\fIlanguages/\fR"
This directory contains several worked examples of SLIF
grammars for various languages, parsers generated for them,
and the infrastructure to build and test them\&.
.sp
Each example resides in its own subdirectory, named after the
language it implements a parser for\&.
.sp
We currently have examples for
.RS
.IP [1]
\fIJSON\fR [http://json\&.org]
.IP [2]
(Tcllib) doctools
.IP [3]
heredoc
.IP [4]
min-dt
.RE
.sp
\fIHeredoc\fR is a general demonstration how `here` documents
can be implemented using stop markers and post-lexeme events\&.
.sp
\fImin-dt\fR is a reduced form of \fIdoctools\fR, used to
work out the general shape of vset and include processing via
stop markers and lexeme events
.RE
.TP
Package Code, General structure
.RS
.TP
"\fIc/\fR"
Files for the \fBmarpa::c\fR package\&.
It provides a very thin class-based wrapper around the data
structures of \fBlibmarpa\fR\&.
The entrypoint is "\fImarpa_c\&.tcl\fR"\&.
.TP
"\fIgen-common/\fR"
The implementations of
.RS
.IP [1]
\fBmarpa::gen::runtime::c\fR,
.IP [2]
\fBmarpa::gen::runtime::tcl\fR,
.IP [3]
\fBmarpa::gen::remask\fR, and
.IP [4]
\fBmarpa::gen::reformat\fR
.RE
.IP
The first two provide the shared code for the main generator
packages handling creation of parsers and lexers for Tcl and C
runtimes\&. The other two are also shared code, at a lower
level\&.
.TP
"\fIgen-format/\fR"
The main generator package, all placed under the namespace
\fBmarpa::gen::format\fR\&.
.RS
.TP
\fBclex-critcl\fR
Lexer using the C runtime, embedded into Tcl via \fBcritcl\fR\&.
.TP
\fBcparse-critcl\fR
Parser using the C runtime, embedded into Tcl via \fBcritcl\fR\&.
.TP
\fBcparse-raw\fR
Parser using the C runtime, raw C, no embedding\&.
.TP
\fBgc-compact\fR
See \fBgc\fR, minimal whitespace\&.
.TP
\fBgc-c\fR
See \fBgc\fR, reduced as if targeted at the C runtime\&.
.TP
\fBgc-tcl\fR
See \fBgc\fR, reduced as if targeted at the Tcl runtime\&.
.TP
\fBgc\fR
Container serialization as nested Tcl dictionary\&.
.TP
\fBslif\fR
Reconstructed SLIF\&.
.TP
\fBtlex\fR
Lexer using the Tcl runtime\&.
.TP
\fBtparse\fR
Parser using the Tcl runtime\&.
.RE
.TP
"\fIruntime-c/\fR"
Files for the \fBmarpa::runtime::c\fR package\&.
The entrypoint is "\fImarpa_runtime_c\&.tcl\fR"\&.
.sp
Note that the two runtimes have very similar internal
architecture\&.
.TP
"\fIruntime-tcl/\fR"
Files for the \fBmarpa::runtime::tcl\fR package\&.
The entrypoint is "\fIpkg_entry\&.tcl\fR"\&.
.sp
Note that the two runtimes have very similar internal
architecture\&.
.TP
"\fIslif-container/\fR"
SLIF grammar support\&.
Provides the package \fBmarpa::slif::container\fR, to hold
parsed grammars\&.
The entrypoint is "\fIpkg_entry\&.tcl\fR"\&.
.TP
"\fIslif-literal/\fR"
SLIF grammar support\&.
Provides the packages
.RS
.IP [1]
\fBmarpa::slif::literal::parser\fR
.IP [2]
\fBmarpa::slif::literal::norm\fR
.IP [3]
\fBmarpa::slif::literal::parse\fR
.IP [4]
\fBmarpa::slif::literal::reduce::2c4tcl\fR
.IP [5]
\fBmarpa::slif::literal::reduce::2tcl\fR
.IP [6]
\fBmarpa::slif::literal::redux\fR
.IP [7]
\fBmarpa::slif::literal::util\fR
.RE
.IP
These are helper packages dealing with literals, from parsing
over normalization to backend-specific reduction\&.
The parser core is generated from a SLIF specification\&.
.TP
"\fIslif-parser/\fR"
SLIF grammar support\&.
Provides the package \fBmarpa::slif::parser\fR, to
translate SLIF text into an abstract syntax tree (AST)\&.
The entrypoint is "\fIpkg_entry\&.tcl\fR"\&.
.sp
\fINote:\fR This parser is generated from a SLIF text itself,
and can be used to bootstrap further changes to the SLIF
specification\&.
.TP
"\fIslif-precedence\&.tcl\fR"
SLIF grammar support\&.
Provides the package \fBmarpa::slif::precedence\fR\&.
This is a helper package containing the algorithm used to
rewrite a set of grammar rules with precedence into an
equivalent set of rules without\&.
.TP
"\fIslif-semantics/\fR"
SLIF grammar support\&.
Provides the package \fBmarpa::slif::semantics\fR, to
translate grammars represented by an AST (parse result) into a
container\&.
The entrypoint is "\fIpkg_entry\&.tcl\fR"\&.
.TP
"\fIunicode/\fR"
The files for package \fBmarpa::unicode\fR\&.
This package also includes the files under "\fIgenerated/\fR"\&.
If such files do not exist at build time the
"\fItools/unidata\&.tcl\fR" helper is automatically invoked to
generate them\&.
.TP
"\fIutil/\fR"
Files for the \fBmarpa::util\fR package, a set of general
utilities\&.
The entrypoint is "\fIpkg_entry\&.tcl\fR"\&.
.RE
.PP
.SH "BUGS, IDEAS, FEEDBACK"
This document, and the package it describes, will undoubtedly contain
bugs and other problems\&.
Please report such at the \fIMarpa/Tcl Tracker\fR [https://core\&.tcl-lang\&.org/akupries/marpatcl]\&.
Please report any ideas for enhancements you may have for either
package and/or documentation as well\&.
.SH KEYWORDS
aycock, character classes, context free grammar, document processing, earley, horspool, joop leo, lexing, libmarpa, nigel horspool, parsing, regex, table parsing
.SH COPYRIGHT
.nf
Copyright (c) 2015-present Andreas Kupries
Copyright (c) 2018-present Documentation, Andreas Kupries

.fi