'\"
'\" Generated from file 'marpatcl\&.man' by tcllib/doctools with format 'nroff'
'\" Copyright (c) 2015-2018 Andreas Kupries
'\" Copyright (c) 2018 Documentation, Andreas Kupries
'\"
.TH "marpatcl" n 0\&.2 doc "Marpa/Tcl, a binding to libmarpa"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
marpatcl \- Marpa/Tcl - The Generator Application
.SH SYNOPSIS
\fBmarpa-gen\fR ?options\&.\&.\&.? ?--? \fIgrammar-file\fR ?\fIoutput\fR?
.sp
.BE
.SH DESCRIPTION
.PP
Welcome to Marpa/Tcl, a Tcl binding to the "\fIlibmarpa\fR" parsing
engine\&.
.PP
Please read the document \fIMarpa/Tcl - Introduction to Marpa/Tcl\fR,
if you have not done so already, to get an overview of the whole system\&.
.SH AUDIENCE
This document is targeted at users intending to create parser packages
with Marpa/Tcl\&.
.SH MARPA-GEN
\fBmarpa-gen\fR is the generator application used to read a SLIF
grammar definition and create various forms of output, including
packages implementing parsers and lexers for the grammar\&.
.PP
To make effective use of it is recommended to also read
\fIMarpa/Tcl - The SLIF grammar specification language\fR
.TP
\fBmarpa-gen\fR ?options\&.\&.\&.? ?--? \fIgrammar-file\fR ?\fIoutput\fR?
In its most basic form the generator command is invoked with the path
to a \fIgrammar-file\fR, printing the result to \fBstdout\fR\&.
If a second path to \fIoutput\fR is specified the result is saved into
that file, possibly creating it\&.
.sp
Invoking the command with no arguments, while technically
invalid, causes it to print basic help information, i\&.e\&. syntax,
available options, and available output types\&.
.sp
The available options are:
.RS
.TP
\fB-author\fR string
.TP
\fB-A\fR string
Specifies the name of the author to embed in the output, provided that
is supported by the chosen type\&. Defaults to the name of the user
invoking the generator\&.
.TP
\fB-name\fR string
.TP
\fB-N\fR string
Specifies the name of the result to embed in the output, provided that
is supported by the chosen type\&. Defaults to the empty string\&.
.TP
\fB-type\fR string
.TP
\fB-T\fR string
Specifies the type of output to generate\&.
If not specified defaults to \fBtparse\fR\&.
The currently available output types are
.RS
.TP
clex-critcl
Generate a lexer written in C and embedded into Tcl via \fBcritcl\fR\&.
The grammar is rewritten to handle charactres beyond the unicode BMP
via CESU-8, i\&.e\&. UTF-8 encoded pairs of surrogate characters, to match
Tcl\&.
The structural rules of the input grammar are ignored\&.
See also \fBtlex\fR\&.
.TP
cparse-critcl
Generate a parser written in C and embedded into Tcl via \fBcritcl\fR\&.
The grammar is rewritten to handle charactres beyond the unicode BMP
via CESU-8, i\&.e\&. UTF-8 encoded pairs of surrogate characters, to match
Tcl\&.
.TP
cparse-raw
Generate a parser written in C, without any embedding\&.
The grammar is rewritten to handle the unicode SMP via normal UTF-8
encoding, i\&.e\&. as sequences of 4 bytes\&.
.TP
gc
Generates Tcl code which initializes a
\fBmarpa::slif::container\fR with the serialization of the input
grammar\&.
.TP
gc-c
As \fBgc\fR above, with the grammar rewritten like is done for
\fBcparse-critcl\fR, and \fBclex-critcl\fR\&.
.TP
gc-compact
As \fBgc\fR above, with all superfluous whitespace removed\&.
.TP
gc-tcl
As \fBgc\fR above, with the grammar rewritten like is done for
\fBtparse\fR and \fBtlex\fR\&.
.TP
slif
Generate a SLIF grammar\&.
Defaults from the input are resolved\&.
Rules are sorted, and reformatted (pretty printed)\&.
.TP
tlex
Generate a lexer written in Tcl\&.
The structural rules of the input grammar are ignored\&.
See also \fBclex-critcl\fR\&.
.TP
tparse
Generate a parser written in Tcl\&.
.RE
.TP
\fB-version\fR string
.TP
\fB-V\fR string
Specifies the version to number embed in the output, provided that is
supported by the chosen type\&. Defaults to \fB1\fR\&.
.TP
\fB--\fR
This option ends option processing, even if arguments coming after it
start with dash (\fB-\fR)\&.
.RE
.PP
.SH "BUGS, IDEAS, FEEDBACK"
This document, and the package it describes, will undoubtedly contain
bugs and other problems\&.
Please report such at the
\fIMarpa/Tcl Tracker\fR [https://core\&.tcl\&.tk/akupries/marpatcl]\&.
Please also report any ideas for enhancements you may have for either
package and/or documentation\&.
.SH KEYWORDS
aycock, character classes, document processing, earley, horspool, joop leo, lexing, libmarpa, nigel horspool, parsing, regex, table parsing
.SH COPYRIGHT
.nf
Copyright (c) 2015-2018 Andreas Kupries
Copyright (c) 2018 Documentation, Andreas Kupries

.fi