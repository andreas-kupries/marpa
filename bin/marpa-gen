#!/usr/bin/env tclsh
# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2017 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## Parser generator application

# @@ Meta Begin
# Application marpa-gen 0.1
# Meta author      {Andreas Kupries}
# Meta category    {Parser/Lexer Generator}
# Meta description A parser generator using Marpa/Tcl and (so far)
# Meta description generating parsers which use Marpa/Tcl
# Meta location    http:/core.tcl.tk/akupries/marpa
# Meta platform    tcl
# Meta require     marpa
# Meta require     {Tcl 8.5}
# Meta require     oo::util
# Meta require     struct::matrix
# Meta require     fileutil
# Meta require     debug
# Meta require     debug::caller
# Meta require     char
# Meta require     lambda
# Meta require     try
# Meta subject     marpa parsing lexing earley aycock horspool
# Meta subject     {joop leo} {nigel horspool} {table parsing}
# Meta subject     regex {character classes}
# Meta summary     A parser generator application based on
# Meta summary     Jeffrey Kegler's libmarpa, a table-based
# Meta summary     parser using Earley at its core, with the fixes
# Meta summary     by Aycock-Horspool and Joop Leo.
# @@ Meta End

package require Tcl 8.5
package require marpa
package require fileutil

proc main {} {
    global type grammar out
    cmdline
    dump $out [generate $type [ingest $grammar]]
    return
}

proc cmdline {} {
    global argv type version name author grammar out note

    set type    tparse
    set version 1
    set name    MarpaParser
    set author  $::tcl_platform(user)@[info hostname]
    
    while {[string match -* [set option [lindex $argv 0]]]} {
	switch -exact -- $option {
	    -type    { take type    argv }
	    -version { take version argv }
	    -name    { take name    argv }
	    -author  { take author  argv }
	    --       { skip argv ; break }
	    default  usage
	}
    }
    switch -exact -- [llength $argv] {
	1 {
	    lassign $argv grammar
	    set out {}
	    set note stderr
	}
	2 {
	    lassign $argv grammar out
	    set note stdout
	}
	default usage
    }

    # check export, check supported

    set st [supported-types]
    if {$type ni $st} {
	append msg "Output type \"$type\" not supported.\n"
	append msg "Expected one of:\n"
	foreach t $st {
	    append msg "- $t\n"
	}
	usage $msg
    }
    return
}

proc take {rv lv} {
    upvar 1 $rv result $lv inlist
    set inlist [lassign $inlist _ result]
    return
}

proc skip {lv} {
    upvar 1 $lv inlist
    set inlist [lassign $inlist _]
    return
}
	
proc usage {{text {}}} {
    global argv0
    puts stderr "Usage: $argv0 ?-type T? ?-version V? ?-name N? ?-author A? ?--? /path/to/slif/grammar ?/path/to/output?"
    if {$text eq {}} {
 	append text "Supported `-type`s:\n"
	foreach t [supported-types] {
	    append text "- $t\n"
	}
    }
    puts stderr \t[join [split $text \n] \n\t]
    exit 1
}

proc supported-types {} {
    return [lsort -dict [lmap e [info commands ::marpa::export::*] {
	if {![llength [info commands ${e}::container]]} continue
	string map {::marpa::export:: {}} $e
    }]]
}

proc ingest {path} {
    global out
    # _ __ ___ _____ ________ _____________ _____________________
    # Process the slif meta grammar
    # TODO: progress callbacks from the parser (call per token ...)

    set sz [file size $path]
    note "Processing $path ($sz bytes) ..."
    marpa::slif::container create GC
    marpa::slif::semantics create SEMA GC
    marpa::slif::parser    create BOOT
    set start [clock milliseconds]
    SEMA process [BOOT process-file $path]
    set done [clock milliseconds]
    set millis [expr {$done-$start}]
    set sec [expr {double($millis)/1000}]
    set speed [expr {$sz/$sec}]
    note "Processing done in [F $sec] seconds (@ [F $speed] bytes/sec)"
    # GC now holds the grammar
    BOOT destroy
    # Note: SEMA auto-destroys at the end of 'process'.

    return GC
}

proc F {n} { format "%.2f" $n }

proc generate {type gc} {
    global author version name
    # _ __ ___ _____ ________ _____________ _____________________
    # Generate the SLIF parser class
    note "Generating ..."
    marpa::export config! year     [clock format [clock seconds] -format %Y]
    marpa::export config! operator $::tcl_platform(user)@[info hostname]
    marpa::export config! tool     [file tail [info script]]

    marpa::export config! version  $version
    marpa::export config! writer   $author
    marpa::export config! name     $name

    set parser [marpa::export::$type container $gc]
    $gc destroy
    return $parser
}

proc dump {out code} {
    # _ __ ___ _____ ________ _____________ _____________________
    # Write out
    if {$out ne {}} {
	note "Saving to $out ..."
	# diverted into file
	fileutil::writeFile $out $code
    } else {
	note "Saving to stdout ..."
	# stdout
	puts $code
    }
    return
}

proc note {text} {
    global note
    puts  $note $text
    flush $note
    return
}

main
exit
